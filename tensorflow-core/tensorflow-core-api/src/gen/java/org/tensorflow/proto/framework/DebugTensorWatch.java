// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/debug.proto

package org.tensorflow.proto.framework;

/**
 * <pre>
 * Option for watching a node in TensorFlow Debugger (tfdbg).
 * </pre>
 *
 * Protobuf type {@code tensorflow.DebugTensorWatch}
 */
public  final class DebugTensorWatch extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:tensorflow.DebugTensorWatch)
    DebugTensorWatchOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DebugTensorWatch.newBuilder() to construct.
  private DebugTensorWatch(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DebugTensorWatch() {
    nodeName_ = "";
    debugOps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    debugUrls_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DebugTensorWatch();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private DebugTensorWatch(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            nodeName_ = s;
            break;
          }
          case 16: {

            outputSlot_ = input.readInt32();
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              debugOps_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            debugOps_.add(s);
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              debugUrls_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            debugUrls_.add(s);
            break;
          }
          case 40: {

            tolerateDebugOpCreationFailures_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        debugOps_ = debugOps_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        debugUrls_ = debugUrls_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.tensorflow.proto.framework.DebugProtos.internal_static_tensorflow_DebugTensorWatch_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.tensorflow.proto.framework.DebugProtos.internal_static_tensorflow_DebugTensorWatch_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.tensorflow.proto.framework.DebugTensorWatch.class, org.tensorflow.proto.framework.DebugTensorWatch.Builder.class);
  }

  public static final int NODE_NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object nodeName_;
  /**
   * <pre>
   * Name of the node to watch.
   * Use "*" for wildcard. But note: currently, regex is not supported in
   * general.
   * </pre>
   *
   * <code>string node_name = 1;</code>
   */
  public java.lang.String getNodeName() {
    java.lang.Object ref = nodeName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      nodeName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Name of the node to watch.
   * Use "*" for wildcard. But note: currently, regex is not supported in
   * general.
   * </pre>
   *
   * <code>string node_name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNodeNameBytes() {
    java.lang.Object ref = nodeName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      nodeName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OUTPUT_SLOT_FIELD_NUMBER = 2;
  private int outputSlot_;
  /**
   * <pre>
   * Output slot to watch.
   * The semantics of output_slot == -1 is that all outputs of the node
   * will be watched (i.e., a wildcard).
   * Other negative values of output_slot are invalid and will lead to
   * errors currently.
   * </pre>
   *
   * <code>int32 output_slot = 2;</code>
   */
  public int getOutputSlot() {
    return outputSlot_;
  }

  public static final int DEBUG_OPS_FIELD_NUMBER = 3;
  private com.google.protobuf.LazyStringList debugOps_;
  /**
   * <pre>
   * Name(s) of the debugging op(s).
   * One or more than one probes on a tensor.
   * e.g., {"DebugIdentity", "DebugNanCount"}
   * </pre>
   *
   * <code>repeated string debug_ops = 3;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getDebugOpsList() {
    return debugOps_;
  }
  /**
   * <pre>
   * Name(s) of the debugging op(s).
   * One or more than one probes on a tensor.
   * e.g., {"DebugIdentity", "DebugNanCount"}
   * </pre>
   *
   * <code>repeated string debug_ops = 3;</code>
   */
  public int getDebugOpsCount() {
    return debugOps_.size();
  }
  /**
   * <pre>
   * Name(s) of the debugging op(s).
   * One or more than one probes on a tensor.
   * e.g., {"DebugIdentity", "DebugNanCount"}
   * </pre>
   *
   * <code>repeated string debug_ops = 3;</code>
   */
  public java.lang.String getDebugOps(int index) {
    return debugOps_.get(index);
  }
  /**
   * <pre>
   * Name(s) of the debugging op(s).
   * One or more than one probes on a tensor.
   * e.g., {"DebugIdentity", "DebugNanCount"}
   * </pre>
   *
   * <code>repeated string debug_ops = 3;</code>
   */
  public com.google.protobuf.ByteString
      getDebugOpsBytes(int index) {
    return debugOps_.getByteString(index);
  }

  public static final int DEBUG_URLS_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList debugUrls_;
  /**
   * <pre>
   * URL(s) for debug targets(s).
   * Supported URL formats are:
   *   - file:///foo/tfdbg_dump: Writes out Event content to file
   *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
   *     already exist.
   *   - grpc://localhost:11011: Sends an RPC request to an EventListener
   *     service running at localhost:11011 with the event.
   *   - memcbk:///event_key: Routes tensors to clients using the
   *     callback registered with the DebugCallbackRegistry for event_key.
   * Each debug op listed in debug_ops will publish its output tensor (debug
   * signal) to all URLs in debug_urls.
   * N.B. Session::Run() supports concurrent invocations of the same inputs
   * (feed keys), outputs and target nodes. If such concurrent invocations
   * are to be debugged, the callers of Session::Run() must use distinct
   * debug_urls to make sure that the streamed or dumped events do not overlap
   * among the invocations.
   * TODO(cais): More visible documentation of this in g3docs.
   * </pre>
   *
   * <code>repeated string debug_urls = 4;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getDebugUrlsList() {
    return debugUrls_;
  }
  /**
   * <pre>
   * URL(s) for debug targets(s).
   * Supported URL formats are:
   *   - file:///foo/tfdbg_dump: Writes out Event content to file
   *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
   *     already exist.
   *   - grpc://localhost:11011: Sends an RPC request to an EventListener
   *     service running at localhost:11011 with the event.
   *   - memcbk:///event_key: Routes tensors to clients using the
   *     callback registered with the DebugCallbackRegistry for event_key.
   * Each debug op listed in debug_ops will publish its output tensor (debug
   * signal) to all URLs in debug_urls.
   * N.B. Session::Run() supports concurrent invocations of the same inputs
   * (feed keys), outputs and target nodes. If such concurrent invocations
   * are to be debugged, the callers of Session::Run() must use distinct
   * debug_urls to make sure that the streamed or dumped events do not overlap
   * among the invocations.
   * TODO(cais): More visible documentation of this in g3docs.
   * </pre>
   *
   * <code>repeated string debug_urls = 4;</code>
   */
  public int getDebugUrlsCount() {
    return debugUrls_.size();
  }
  /**
   * <pre>
   * URL(s) for debug targets(s).
   * Supported URL formats are:
   *   - file:///foo/tfdbg_dump: Writes out Event content to file
   *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
   *     already exist.
   *   - grpc://localhost:11011: Sends an RPC request to an EventListener
   *     service running at localhost:11011 with the event.
   *   - memcbk:///event_key: Routes tensors to clients using the
   *     callback registered with the DebugCallbackRegistry for event_key.
   * Each debug op listed in debug_ops will publish its output tensor (debug
   * signal) to all URLs in debug_urls.
   * N.B. Session::Run() supports concurrent invocations of the same inputs
   * (feed keys), outputs and target nodes. If such concurrent invocations
   * are to be debugged, the callers of Session::Run() must use distinct
   * debug_urls to make sure that the streamed or dumped events do not overlap
   * among the invocations.
   * TODO(cais): More visible documentation of this in g3docs.
   * </pre>
   *
   * <code>repeated string debug_urls = 4;</code>
   */
  public java.lang.String getDebugUrls(int index) {
    return debugUrls_.get(index);
  }
  /**
   * <pre>
   * URL(s) for debug targets(s).
   * Supported URL formats are:
   *   - file:///foo/tfdbg_dump: Writes out Event content to file
   *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
   *     already exist.
   *   - grpc://localhost:11011: Sends an RPC request to an EventListener
   *     service running at localhost:11011 with the event.
   *   - memcbk:///event_key: Routes tensors to clients using the
   *     callback registered with the DebugCallbackRegistry for event_key.
   * Each debug op listed in debug_ops will publish its output tensor (debug
   * signal) to all URLs in debug_urls.
   * N.B. Session::Run() supports concurrent invocations of the same inputs
   * (feed keys), outputs and target nodes. If such concurrent invocations
   * are to be debugged, the callers of Session::Run() must use distinct
   * debug_urls to make sure that the streamed or dumped events do not overlap
   * among the invocations.
   * TODO(cais): More visible documentation of this in g3docs.
   * </pre>
   *
   * <code>repeated string debug_urls = 4;</code>
   */
  public com.google.protobuf.ByteString
      getDebugUrlsBytes(int index) {
    return debugUrls_.getByteString(index);
  }

  public static final int TOLERATE_DEBUG_OP_CREATION_FAILURES_FIELD_NUMBER = 5;
  private boolean tolerateDebugOpCreationFailures_;
  /**
   * <pre>
   * Do not error out if debug op creation fails (e.g., due to dtype
   * incompatibility). Instead, just log the failure.
   * </pre>
   *
   * <code>bool tolerate_debug_op_creation_failures = 5;</code>
   */
  public boolean getTolerateDebugOpCreationFailures() {
    return tolerateDebugOpCreationFailures_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNodeNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, nodeName_);
    }
    if (outputSlot_ != 0) {
      output.writeInt32(2, outputSlot_);
    }
    for (int i = 0; i < debugOps_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, debugOps_.getRaw(i));
    }
    for (int i = 0; i < debugUrls_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, debugUrls_.getRaw(i));
    }
    if (tolerateDebugOpCreationFailures_ != false) {
      output.writeBool(5, tolerateDebugOpCreationFailures_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNodeNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, nodeName_);
    }
    if (outputSlot_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, outputSlot_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < debugOps_.size(); i++) {
        dataSize += computeStringSizeNoTag(debugOps_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getDebugOpsList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < debugUrls_.size(); i++) {
        dataSize += computeStringSizeNoTag(debugUrls_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getDebugUrlsList().size();
    }
    if (tolerateDebugOpCreationFailures_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, tolerateDebugOpCreationFailures_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.tensorflow.proto.framework.DebugTensorWatch)) {
      return super.equals(obj);
    }
    org.tensorflow.proto.framework.DebugTensorWatch other = (org.tensorflow.proto.framework.DebugTensorWatch) obj;

    if (!getNodeName()
        .equals(other.getNodeName())) return false;
    if (getOutputSlot()
        != other.getOutputSlot()) return false;
    if (!getDebugOpsList()
        .equals(other.getDebugOpsList())) return false;
    if (!getDebugUrlsList()
        .equals(other.getDebugUrlsList())) return false;
    if (getTolerateDebugOpCreationFailures()
        != other.getTolerateDebugOpCreationFailures()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NODE_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getNodeName().hashCode();
    hash = (37 * hash) + OUTPUT_SLOT_FIELD_NUMBER;
    hash = (53 * hash) + getOutputSlot();
    if (getDebugOpsCount() > 0) {
      hash = (37 * hash) + DEBUG_OPS_FIELD_NUMBER;
      hash = (53 * hash) + getDebugOpsList().hashCode();
    }
    if (getDebugUrlsCount() > 0) {
      hash = (37 * hash) + DEBUG_URLS_FIELD_NUMBER;
      hash = (53 * hash) + getDebugUrlsList().hashCode();
    }
    hash = (37 * hash) + TOLERATE_DEBUG_OP_CREATION_FAILURES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getTolerateDebugOpCreationFailures());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.tensorflow.proto.framework.DebugTensorWatch parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tensorflow.proto.framework.DebugTensorWatch parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.tensorflow.proto.framework.DebugTensorWatch prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Option for watching a node in TensorFlow Debugger (tfdbg).
   * </pre>
   *
   * Protobuf type {@code tensorflow.DebugTensorWatch}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:tensorflow.DebugTensorWatch)
      org.tensorflow.proto.framework.DebugTensorWatchOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.proto.framework.DebugProtos.internal_static_tensorflow_DebugTensorWatch_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.proto.framework.DebugProtos.internal_static_tensorflow_DebugTensorWatch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.proto.framework.DebugTensorWatch.class, org.tensorflow.proto.framework.DebugTensorWatch.Builder.class);
    }

    // Construct using org.tensorflow.proto.framework.DebugTensorWatch.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      nodeName_ = "";

      outputSlot_ = 0;

      debugOps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      debugUrls_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      tolerateDebugOpCreationFailures_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.tensorflow.proto.framework.DebugProtos.internal_static_tensorflow_DebugTensorWatch_descriptor;
    }

    @java.lang.Override
    public org.tensorflow.proto.framework.DebugTensorWatch getDefaultInstanceForType() {
      return org.tensorflow.proto.framework.DebugTensorWatch.getDefaultInstance();
    }

    @java.lang.Override
    public org.tensorflow.proto.framework.DebugTensorWatch build() {
      org.tensorflow.proto.framework.DebugTensorWatch result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.tensorflow.proto.framework.DebugTensorWatch buildPartial() {
      org.tensorflow.proto.framework.DebugTensorWatch result = new org.tensorflow.proto.framework.DebugTensorWatch(this);
      int from_bitField0_ = bitField0_;
      result.nodeName_ = nodeName_;
      result.outputSlot_ = outputSlot_;
      if (((bitField0_ & 0x00000001) != 0)) {
        debugOps_ = debugOps_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.debugOps_ = debugOps_;
      if (((bitField0_ & 0x00000002) != 0)) {
        debugUrls_ = debugUrls_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.debugUrls_ = debugUrls_;
      result.tolerateDebugOpCreationFailures_ = tolerateDebugOpCreationFailures_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.tensorflow.proto.framework.DebugTensorWatch) {
        return mergeFrom((org.tensorflow.proto.framework.DebugTensorWatch)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.tensorflow.proto.framework.DebugTensorWatch other) {
      if (other == org.tensorflow.proto.framework.DebugTensorWatch.getDefaultInstance()) return this;
      if (!other.getNodeName().isEmpty()) {
        nodeName_ = other.nodeName_;
        onChanged();
      }
      if (other.getOutputSlot() != 0) {
        setOutputSlot(other.getOutputSlot());
      }
      if (!other.debugOps_.isEmpty()) {
        if (debugOps_.isEmpty()) {
          debugOps_ = other.debugOps_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureDebugOpsIsMutable();
          debugOps_.addAll(other.debugOps_);
        }
        onChanged();
      }
      if (!other.debugUrls_.isEmpty()) {
        if (debugUrls_.isEmpty()) {
          debugUrls_ = other.debugUrls_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureDebugUrlsIsMutable();
          debugUrls_.addAll(other.debugUrls_);
        }
        onChanged();
      }
      if (other.getTolerateDebugOpCreationFailures() != false) {
        setTolerateDebugOpCreationFailures(other.getTolerateDebugOpCreationFailures());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.tensorflow.proto.framework.DebugTensorWatch parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.tensorflow.proto.framework.DebugTensorWatch) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object nodeName_ = "";
    /**
     * <pre>
     * Name of the node to watch.
     * Use "*" for wildcard. But note: currently, regex is not supported in
     * general.
     * </pre>
     *
     * <code>string node_name = 1;</code>
     */
    public java.lang.String getNodeName() {
      java.lang.Object ref = nodeName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nodeName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Name of the node to watch.
     * Use "*" for wildcard. But note: currently, regex is not supported in
     * general.
     * </pre>
     *
     * <code>string node_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNodeNameBytes() {
      java.lang.Object ref = nodeName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nodeName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Name of the node to watch.
     * Use "*" for wildcard. But note: currently, regex is not supported in
     * general.
     * </pre>
     *
     * <code>string node_name = 1;</code>
     */
    public Builder setNodeName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      nodeName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name of the node to watch.
     * Use "*" for wildcard. But note: currently, regex is not supported in
     * general.
     * </pre>
     *
     * <code>string node_name = 1;</code>
     */
    public Builder clearNodeName() {
      
      nodeName_ = getDefaultInstance().getNodeName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name of the node to watch.
     * Use "*" for wildcard. But note: currently, regex is not supported in
     * general.
     * </pre>
     *
     * <code>string node_name = 1;</code>
     */
    public Builder setNodeNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      nodeName_ = value;
      onChanged();
      return this;
    }

    private int outputSlot_ ;
    /**
     * <pre>
     * Output slot to watch.
     * The semantics of output_slot == -1 is that all outputs of the node
     * will be watched (i.e., a wildcard).
     * Other negative values of output_slot are invalid and will lead to
     * errors currently.
     * </pre>
     *
     * <code>int32 output_slot = 2;</code>
     */
    public int getOutputSlot() {
      return outputSlot_;
    }
    /**
     * <pre>
     * Output slot to watch.
     * The semantics of output_slot == -1 is that all outputs of the node
     * will be watched (i.e., a wildcard).
     * Other negative values of output_slot are invalid and will lead to
     * errors currently.
     * </pre>
     *
     * <code>int32 output_slot = 2;</code>
     */
    public Builder setOutputSlot(int value) {
      
      outputSlot_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output slot to watch.
     * The semantics of output_slot == -1 is that all outputs of the node
     * will be watched (i.e., a wildcard).
     * Other negative values of output_slot are invalid and will lead to
     * errors currently.
     * </pre>
     *
     * <code>int32 output_slot = 2;</code>
     */
    public Builder clearOutputSlot() {
      
      outputSlot_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList debugOps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureDebugOpsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        debugOps_ = new com.google.protobuf.LazyStringArrayList(debugOps_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getDebugOpsList() {
      return debugOps_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public int getDebugOpsCount() {
      return debugOps_.size();
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public java.lang.String getDebugOps(int index) {
      return debugOps_.get(index);
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDebugOpsBytes(int index) {
      return debugOps_.getByteString(index);
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public Builder setDebugOps(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDebugOpsIsMutable();
      debugOps_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public Builder addDebugOps(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDebugOpsIsMutable();
      debugOps_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public Builder addAllDebugOps(
        java.lang.Iterable<java.lang.String> values) {
      ensureDebugOpsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, debugOps_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public Builder clearDebugOps() {
      debugOps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public Builder addDebugOpsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureDebugOpsIsMutable();
      debugOps_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList debugUrls_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureDebugUrlsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        debugUrls_ = new com.google.protobuf.LazyStringArrayList(debugUrls_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getDebugUrlsList() {
      return debugUrls_.getUnmodifiableView();
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public int getDebugUrlsCount() {
      return debugUrls_.size();
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public java.lang.String getDebugUrls(int index) {
      return debugUrls_.get(index);
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDebugUrlsBytes(int index) {
      return debugUrls_.getByteString(index);
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public Builder setDebugUrls(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDebugUrlsIsMutable();
      debugUrls_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public Builder addDebugUrls(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDebugUrlsIsMutable();
      debugUrls_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public Builder addAllDebugUrls(
        java.lang.Iterable<java.lang.String> values) {
      ensureDebugUrlsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, debugUrls_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public Builder clearDebugUrls() {
      debugUrls_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public Builder addDebugUrlsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureDebugUrlsIsMutable();
      debugUrls_.add(value);
      onChanged();
      return this;
    }

    private boolean tolerateDebugOpCreationFailures_ ;
    /**
     * <pre>
     * Do not error out if debug op creation fails (e.g., due to dtype
     * incompatibility). Instead, just log the failure.
     * </pre>
     *
     * <code>bool tolerate_debug_op_creation_failures = 5;</code>
     */
    public boolean getTolerateDebugOpCreationFailures() {
      return tolerateDebugOpCreationFailures_;
    }
    /**
     * <pre>
     * Do not error out if debug op creation fails (e.g., due to dtype
     * incompatibility). Instead, just log the failure.
     * </pre>
     *
     * <code>bool tolerate_debug_op_creation_failures = 5;</code>
     */
    public Builder setTolerateDebugOpCreationFailures(boolean value) {
      
      tolerateDebugOpCreationFailures_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Do not error out if debug op creation fails (e.g., due to dtype
     * incompatibility). Instead, just log the failure.
     * </pre>
     *
     * <code>bool tolerate_debug_op_creation_failures = 5;</code>
     */
    public Builder clearTolerateDebugOpCreationFailures() {
      
      tolerateDebugOpCreationFailures_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:tensorflow.DebugTensorWatch)
  }

  // @@protoc_insertion_point(class_scope:tensorflow.DebugTensorWatch)
  private static final org.tensorflow.proto.framework.DebugTensorWatch DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.tensorflow.proto.framework.DebugTensorWatch();
  }

  public static org.tensorflow.proto.framework.DebugTensorWatch getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DebugTensorWatch>
      PARSER = new com.google.protobuf.AbstractParser<DebugTensorWatch>() {
    @java.lang.Override
    public DebugTensorWatch parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new DebugTensorWatch(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DebugTensorWatch> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DebugTensorWatch> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.tensorflow.proto.framework.DebugTensorWatch getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

