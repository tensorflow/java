// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.tensorflow.internal.c_api;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.tensorflow.internal.c_api.global.tensorflow.*;

// #endif

/** \ingroup core
 *  Denotes success or failure of a call in Tensorflow. */
@Namespace("tensorflow") @NoOffset @Properties(inherit = org.tensorflow.internal.c_api.presets.tensorflow.class)
public class Status extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Status(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Status(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Status position(long position) {
        return (Status)super.position(position);
    }
    @Override public Status getPointer(long i) {
        return new Status((Pointer)this).position(position + i);
    }

  /** Create a success status. */
  public Status() { super((Pointer)null); allocate(); }
  private native void allocate();

  /** \brief Create a status with the specified error code and msg as a
   *  human-readable string containing more detailed information. */
  public Status(@Cast("tensorflow::error::Code") int code, @StdString BytePointer msg) { super((Pointer)null); allocate(code, msg); }
  private native void allocate(@Cast("tensorflow::error::Code") int code, @StdString BytePointer msg);
  public Status(@Cast("tensorflow::error::Code") int code, @StdString String msg) { super((Pointer)null); allocate(code, msg); }
  private native void allocate(@Cast("tensorflow::error::Code") int code, @StdString String msg);

  /** \brief Create a status with the specified error code, msg, and stack trace
   *  as a human-readable string containing more detailed information. */
// #ifndef SWIG
  public Status(@Cast("tensorflow::error::Code") int code, @StdString BytePointer msg,
           @StdMove StackFrameVector stack_trace) { super((Pointer)null); allocate(code, msg, stack_trace); }
  private native void allocate(@Cast("tensorflow::error::Code") int code, @StdString BytePointer msg,
           @StdMove StackFrameVector stack_trace);
  public Status(@Cast("tensorflow::error::Code") int code, @StdString String msg,
           @StdMove StackFrameVector stack_trace) { super((Pointer)null); allocate(code, msg, stack_trace); }
  private native void allocate(@Cast("tensorflow::error::Code") int code, @StdString String msg,
           @StdMove StackFrameVector stack_trace);
// #endif

  /** Copy the specified status. */
  public Status(@Const @ByRef Status s) { super((Pointer)null); allocate(s); }
  private native void allocate(@Const @ByRef Status s);
  public native @ByRef @Name("operator =") Status put(@Const @ByRef Status s);
// #ifndef SWIG
// #endif  // SWIG

  public static native @ByVal Status OK();

  /** Returns true iff the status indicates success. */
  public native @Cast("bool") boolean ok();

  public native @Cast("tensorflow::error::Code") int code();

  public native @StdString BytePointer error_message();

  public native @StdMove StackFrameVector stack_trace();

  public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef Status x);
  
  ///
  public native @Cast("bool") @Name("operator !=") boolean notEquals(@Const @ByRef Status x);

  /** \brief If {@code ok()}, stores {@code new_status} into {@code *this}.  If {@code !ok()},
   *  preserves the current status, but may augment with additional
   *  information about {@code new_status}.
   * 
   *  Convenient way of keeping track of the first error encountered.
   *  Instead of:
   *    {@code if (overall_status.ok()) overall_status = new_status}
   *  Use:
   *    {@code overall_status.Update(new_status);} */
  public native void Update(@Const @ByRef Status new_status);

  /** \brief Return a string representation of this status suitable for
   *  printing. Returns the string {@code "OK"} for success. */
  public native @StdString BytePointer ToString();

  // Ignores any errors. This method does nothing except potentially suppress
  // complaints from any tools that are checking that errors are not dropped on
  // the floor.
  public native void IgnoreError();

  // The Payload-related APIs are cloned from absl::Status.
  //
  // Returns the payload of a status given its unique `type_url` key, if
  // present. Returns an empty StringPiece if the status is ok, or if the key is
  // not present.
  public native @ByVal @Cast("tensorflow::StringPiece*") PointerPointer GetPayload(@StdString BytePointer type_url);
  public native @ByVal @Cast("tensorflow::StringPiece*") PointerPointer GetPayload(@StdString String type_url);

  // Sets the payload for a non-ok status using a `type_url` key, overwriting
  // any existing payload for that `type_url`.
  //
  // This function does nothing if the Status is ok.
  public native void SetPayload(@StdString BytePointer type_url,
                    @StdString BytePointer payload);
  public native void SetPayload(@StdString String type_url,
                    @StdString String payload);

  // Erases the payload corresponding to the `type_url` key.  Returns `true` if
  // the payload was present.
  public native @Cast("bool") boolean ErasePayload(@StdString BytePointer type_url);
  public native @Cast("bool") boolean ErasePayload(@StdString String type_url);

  // Returns all the payload information.
  // Returns an empty result if status is ok.
  public native @Const @ByVal StringStringMap GetAllPayloads();

  // Copies all the payloads using the input and discards existing payloads.
  // Does nothing if status is ok or 'payloads' is empty.
  public native void ReplaceAllPayloads(
        @Const @ByRef StringStringMap payloads);
}
