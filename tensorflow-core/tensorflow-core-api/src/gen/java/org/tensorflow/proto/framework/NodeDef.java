// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/node_def.proto

package org.tensorflow.proto.framework;

/**
 * Protobuf type {@code tensorflow.NodeDef}
 */
public  final class NodeDef extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:tensorflow.NodeDef)
    NodeDefOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NodeDef.newBuilder() to construct.
  private NodeDef(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NodeDef() {
    name_ = "";
    op_ = "";
    input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    device_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new NodeDef();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private NodeDef(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            op_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              input_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            input_.add(s);
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            device_ = s;
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              attr_ = com.google.protobuf.MapField.newMapField(
                  AttrDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, org.tensorflow.proto.framework.AttrValue>
            attr__ = input.readMessage(
                AttrDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            attr_.getMutableMap().put(
                attr__.getKey(), attr__.getValue());
            break;
          }
          case 50: {
            org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.Builder subBuilder = null;
            if (experimentalDebugInfo_ != null) {
              subBuilder = experimentalDebugInfo_.toBuilder();
            }
            experimentalDebugInfo_ = input.readMessage(org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(experimentalDebugInfo_);
              experimentalDebugInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        input_ = input_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 5:
        return internalGetAttr();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.tensorflow.proto.framework.NodeDef.class, org.tensorflow.proto.framework.NodeDef.Builder.class);
  }

  public interface ExperimentalDebugInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.NodeDef.ExperimentalDebugInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Opaque string inserted into error messages created by the runtime.
     * This is intended to store the list of names of the nodes from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
     * be {A, B}. This information can be used to map errors originating at the
     * current node to some top level source code.
     * </pre>
     *
     * <code>repeated string original_node_names = 1;</code>
     */
    java.util.List<java.lang.String>
        getOriginalNodeNamesList();
    /**
     * <pre>
     * Opaque string inserted into error messages created by the runtime.
     * This is intended to store the list of names of the nodes from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
     * be {A, B}. This information can be used to map errors originating at the
     * current node to some top level source code.
     * </pre>
     *
     * <code>repeated string original_node_names = 1;</code>
     */
    int getOriginalNodeNamesCount();
    /**
     * <pre>
     * Opaque string inserted into error messages created by the runtime.
     * This is intended to store the list of names of the nodes from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
     * be {A, B}. This information can be used to map errors originating at the
     * current node to some top level source code.
     * </pre>
     *
     * <code>repeated string original_node_names = 1;</code>
     */
    java.lang.String getOriginalNodeNames(int index);
    /**
     * <pre>
     * Opaque string inserted into error messages created by the runtime.
     * This is intended to store the list of names of the nodes from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
     * be {A, B}. This information can be used to map errors originating at the
     * current node to some top level source code.
     * </pre>
     *
     * <code>repeated string original_node_names = 1;</code>
     */
    com.google.protobuf.ByteString
        getOriginalNodeNamesBytes(int index);

    /**
     * <pre>
     * This is intended to store the list of names of the functions from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of node A in function FA and node B in function
     * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
     * level graph, the `original_func` is empty. This information, with the
     * `original_node_names` can be used to map errors originating at the
     * current ndoe to some top level source code.
     * </pre>
     *
     * <code>repeated string original_func_names = 2;</code>
     */
    java.util.List<java.lang.String>
        getOriginalFuncNamesList();
    /**
     * <pre>
     * This is intended to store the list of names of the functions from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of node A in function FA and node B in function
     * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
     * level graph, the `original_func` is empty. This information, with the
     * `original_node_names` can be used to map errors originating at the
     * current ndoe to some top level source code.
     * </pre>
     *
     * <code>repeated string original_func_names = 2;</code>
     */
    int getOriginalFuncNamesCount();
    /**
     * <pre>
     * This is intended to store the list of names of the functions from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of node A in function FA and node B in function
     * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
     * level graph, the `original_func` is empty. This information, with the
     * `original_node_names` can be used to map errors originating at the
     * current ndoe to some top level source code.
     * </pre>
     *
     * <code>repeated string original_func_names = 2;</code>
     */
    java.lang.String getOriginalFuncNames(int index);
    /**
     * <pre>
     * This is intended to store the list of names of the functions from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of node A in function FA and node B in function
     * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
     * level graph, the `original_func` is empty. This information, with the
     * `original_node_names` can be used to map errors originating at the
     * current ndoe to some top level source code.
     * </pre>
     *
     * <code>repeated string original_func_names = 2;</code>
     */
    com.google.protobuf.ByteString
        getOriginalFuncNamesBytes(int index);
  }
  /**
   * Protobuf type {@code tensorflow.NodeDef.ExperimentalDebugInfo}
   */
  public  static final class ExperimentalDebugInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.NodeDef.ExperimentalDebugInfo)
      ExperimentalDebugInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExperimentalDebugInfo.newBuilder() to construct.
    private ExperimentalDebugInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExperimentalDebugInfo() {
      originalNodeNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      originalFuncNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExperimentalDebugInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExperimentalDebugInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                originalNodeNames_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              originalNodeNames_.add(s);
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                originalFuncNames_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              originalFuncNames_.add(s);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          originalNodeNames_ = originalNodeNames_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          originalFuncNames_ = originalFuncNames_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_ExperimentalDebugInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_ExperimentalDebugInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.class, org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.Builder.class);
    }

    public static final int ORIGINAL_NODE_NAMES_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList originalNodeNames_;
    /**
     * <pre>
     * Opaque string inserted into error messages created by the runtime.
     * This is intended to store the list of names of the nodes from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
     * be {A, B}. This information can be used to map errors originating at the
     * current node to some top level source code.
     * </pre>
     *
     * <code>repeated string original_node_names = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getOriginalNodeNamesList() {
      return originalNodeNames_;
    }
    /**
     * <pre>
     * Opaque string inserted into error messages created by the runtime.
     * This is intended to store the list of names of the nodes from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
     * be {A, B}. This information can be used to map errors originating at the
     * current node to some top level source code.
     * </pre>
     *
     * <code>repeated string original_node_names = 1;</code>
     */
    public int getOriginalNodeNamesCount() {
      return originalNodeNames_.size();
    }
    /**
     * <pre>
     * Opaque string inserted into error messages created by the runtime.
     * This is intended to store the list of names of the nodes from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
     * be {A, B}. This information can be used to map errors originating at the
     * current node to some top level source code.
     * </pre>
     *
     * <code>repeated string original_node_names = 1;</code>
     */
    public java.lang.String getOriginalNodeNames(int index) {
      return originalNodeNames_.get(index);
    }
    /**
     * <pre>
     * Opaque string inserted into error messages created by the runtime.
     * This is intended to store the list of names of the nodes from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
     * be {A, B}. This information can be used to map errors originating at the
     * current node to some top level source code.
     * </pre>
     *
     * <code>repeated string original_node_names = 1;</code>
     */
    public com.google.protobuf.ByteString
        getOriginalNodeNamesBytes(int index) {
      return originalNodeNames_.getByteString(index);
    }

    public static final int ORIGINAL_FUNC_NAMES_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList originalFuncNames_;
    /**
     * <pre>
     * This is intended to store the list of names of the functions from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of node A in function FA and node B in function
     * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
     * level graph, the `original_func` is empty. This information, with the
     * `original_node_names` can be used to map errors originating at the
     * current ndoe to some top level source code.
     * </pre>
     *
     * <code>repeated string original_func_names = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getOriginalFuncNamesList() {
      return originalFuncNames_;
    }
    /**
     * <pre>
     * This is intended to store the list of names of the functions from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of node A in function FA and node B in function
     * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
     * level graph, the `original_func` is empty. This information, with the
     * `original_node_names` can be used to map errors originating at the
     * current ndoe to some top level source code.
     * </pre>
     *
     * <code>repeated string original_func_names = 2;</code>
     */
    public int getOriginalFuncNamesCount() {
      return originalFuncNames_.size();
    }
    /**
     * <pre>
     * This is intended to store the list of names of the functions from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of node A in function FA and node B in function
     * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
     * level graph, the `original_func` is empty. This information, with the
     * `original_node_names` can be used to map errors originating at the
     * current ndoe to some top level source code.
     * </pre>
     *
     * <code>repeated string original_func_names = 2;</code>
     */
    public java.lang.String getOriginalFuncNames(int index) {
      return originalFuncNames_.get(index);
    }
    /**
     * <pre>
     * This is intended to store the list of names of the functions from the
     * original graph that this node was derived. For example if this node, say
     * C, was result of a fusion of node A in function FA and node B in function
     * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
     * level graph, the `original_func` is empty. This information, with the
     * `original_node_names` can be used to map errors originating at the
     * current ndoe to some top level source code.
     * </pre>
     *
     * <code>repeated string original_func_names = 2;</code>
     */
    public com.google.protobuf.ByteString
        getOriginalFuncNamesBytes(int index) {
      return originalFuncNames_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < originalNodeNames_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, originalNodeNames_.getRaw(i));
      }
      for (int i = 0; i < originalFuncNames_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, originalFuncNames_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < originalNodeNames_.size(); i++) {
          dataSize += computeStringSizeNoTag(originalNodeNames_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getOriginalNodeNamesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < originalFuncNames_.size(); i++) {
          dataSize += computeStringSizeNoTag(originalFuncNames_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getOriginalFuncNamesList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo)) {
        return super.equals(obj);
      }
      org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo other = (org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo) obj;

      if (!getOriginalNodeNamesList()
          .equals(other.getOriginalNodeNamesList())) return false;
      if (!getOriginalFuncNamesList()
          .equals(other.getOriginalFuncNamesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getOriginalNodeNamesCount() > 0) {
        hash = (37 * hash) + ORIGINAL_NODE_NAMES_FIELD_NUMBER;
        hash = (53 * hash) + getOriginalNodeNamesList().hashCode();
      }
      if (getOriginalFuncNamesCount() > 0) {
        hash = (37 * hash) + ORIGINAL_FUNC_NAMES_FIELD_NUMBER;
        hash = (53 * hash) + getOriginalFuncNamesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tensorflow.NodeDef.ExperimentalDebugInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.NodeDef.ExperimentalDebugInfo)
        org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_ExperimentalDebugInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_ExperimentalDebugInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.class, org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.Builder.class);
      }

      // Construct using org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        originalNodeNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        originalFuncNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_ExperimentalDebugInfo_descriptor;
      }

      @java.lang.Override
      public org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo getDefaultInstanceForType() {
        return org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.getDefaultInstance();
      }

      @java.lang.Override
      public org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo build() {
        org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo buildPartial() {
        org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo result = new org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          originalNodeNames_ = originalNodeNames_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.originalNodeNames_ = originalNodeNames_;
        if (((bitField0_ & 0x00000002) != 0)) {
          originalFuncNames_ = originalFuncNames_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.originalFuncNames_ = originalFuncNames_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo) {
          return mergeFrom((org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo other) {
        if (other == org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.getDefaultInstance()) return this;
        if (!other.originalNodeNames_.isEmpty()) {
          if (originalNodeNames_.isEmpty()) {
            originalNodeNames_ = other.originalNodeNames_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureOriginalNodeNamesIsMutable();
            originalNodeNames_.addAll(other.originalNodeNames_);
          }
          onChanged();
        }
        if (!other.originalFuncNames_.isEmpty()) {
          if (originalFuncNames_.isEmpty()) {
            originalFuncNames_ = other.originalFuncNames_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureOriginalFuncNamesIsMutable();
            originalFuncNames_.addAll(other.originalFuncNames_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList originalNodeNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureOriginalNodeNamesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          originalNodeNames_ = new com.google.protobuf.LazyStringArrayList(originalNodeNames_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Opaque string inserted into error messages created by the runtime.
       * This is intended to store the list of names of the nodes from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
       * be {A, B}. This information can be used to map errors originating at the
       * current node to some top level source code.
       * </pre>
       *
       * <code>repeated string original_node_names = 1;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getOriginalNodeNamesList() {
        return originalNodeNames_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Opaque string inserted into error messages created by the runtime.
       * This is intended to store the list of names of the nodes from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
       * be {A, B}. This information can be used to map errors originating at the
       * current node to some top level source code.
       * </pre>
       *
       * <code>repeated string original_node_names = 1;</code>
       */
      public int getOriginalNodeNamesCount() {
        return originalNodeNames_.size();
      }
      /**
       * <pre>
       * Opaque string inserted into error messages created by the runtime.
       * This is intended to store the list of names of the nodes from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
       * be {A, B}. This information can be used to map errors originating at the
       * current node to some top level source code.
       * </pre>
       *
       * <code>repeated string original_node_names = 1;</code>
       */
      public java.lang.String getOriginalNodeNames(int index) {
        return originalNodeNames_.get(index);
      }
      /**
       * <pre>
       * Opaque string inserted into error messages created by the runtime.
       * This is intended to store the list of names of the nodes from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
       * be {A, B}. This information can be used to map errors originating at the
       * current node to some top level source code.
       * </pre>
       *
       * <code>repeated string original_node_names = 1;</code>
       */
      public com.google.protobuf.ByteString
          getOriginalNodeNamesBytes(int index) {
        return originalNodeNames_.getByteString(index);
      }
      /**
       * <pre>
       * Opaque string inserted into error messages created by the runtime.
       * This is intended to store the list of names of the nodes from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
       * be {A, B}. This information can be used to map errors originating at the
       * current node to some top level source code.
       * </pre>
       *
       * <code>repeated string original_node_names = 1;</code>
       */
      public Builder setOriginalNodeNames(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOriginalNodeNamesIsMutable();
        originalNodeNames_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Opaque string inserted into error messages created by the runtime.
       * This is intended to store the list of names of the nodes from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
       * be {A, B}. This information can be used to map errors originating at the
       * current node to some top level source code.
       * </pre>
       *
       * <code>repeated string original_node_names = 1;</code>
       */
      public Builder addOriginalNodeNames(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOriginalNodeNamesIsMutable();
        originalNodeNames_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Opaque string inserted into error messages created by the runtime.
       * This is intended to store the list of names of the nodes from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
       * be {A, B}. This information can be used to map errors originating at the
       * current node to some top level source code.
       * </pre>
       *
       * <code>repeated string original_node_names = 1;</code>
       */
      public Builder addAllOriginalNodeNames(
          java.lang.Iterable<java.lang.String> values) {
        ensureOriginalNodeNamesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, originalNodeNames_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Opaque string inserted into error messages created by the runtime.
       * This is intended to store the list of names of the nodes from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
       * be {A, B}. This information can be used to map errors originating at the
       * current node to some top level source code.
       * </pre>
       *
       * <code>repeated string original_node_names = 1;</code>
       */
      public Builder clearOriginalNodeNames() {
        originalNodeNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Opaque string inserted into error messages created by the runtime.
       * This is intended to store the list of names of the nodes from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of 2 nodes A and B, then 'original_node' would
       * be {A, B}. This information can be used to map errors originating at the
       * current node to some top level source code.
       * </pre>
       *
       * <code>repeated string original_node_names = 1;</code>
       */
      public Builder addOriginalNodeNamesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureOriginalNodeNamesIsMutable();
        originalNodeNames_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList originalFuncNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureOriginalFuncNamesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          originalFuncNames_ = new com.google.protobuf.LazyStringArrayList(originalFuncNames_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * This is intended to store the list of names of the functions from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of node A in function FA and node B in function
       * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
       * level graph, the `original_func` is empty. This information, with the
       * `original_node_names` can be used to map errors originating at the
       * current ndoe to some top level source code.
       * </pre>
       *
       * <code>repeated string original_func_names = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getOriginalFuncNamesList() {
        return originalFuncNames_.getUnmodifiableView();
      }
      /**
       * <pre>
       * This is intended to store the list of names of the functions from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of node A in function FA and node B in function
       * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
       * level graph, the `original_func` is empty. This information, with the
       * `original_node_names` can be used to map errors originating at the
       * current ndoe to some top level source code.
       * </pre>
       *
       * <code>repeated string original_func_names = 2;</code>
       */
      public int getOriginalFuncNamesCount() {
        return originalFuncNames_.size();
      }
      /**
       * <pre>
       * This is intended to store the list of names of the functions from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of node A in function FA and node B in function
       * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
       * level graph, the `original_func` is empty. This information, with the
       * `original_node_names` can be used to map errors originating at the
       * current ndoe to some top level source code.
       * </pre>
       *
       * <code>repeated string original_func_names = 2;</code>
       */
      public java.lang.String getOriginalFuncNames(int index) {
        return originalFuncNames_.get(index);
      }
      /**
       * <pre>
       * This is intended to store the list of names of the functions from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of node A in function FA and node B in function
       * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
       * level graph, the `original_func` is empty. This information, with the
       * `original_node_names` can be used to map errors originating at the
       * current ndoe to some top level source code.
       * </pre>
       *
       * <code>repeated string original_func_names = 2;</code>
       */
      public com.google.protobuf.ByteString
          getOriginalFuncNamesBytes(int index) {
        return originalFuncNames_.getByteString(index);
      }
      /**
       * <pre>
       * This is intended to store the list of names of the functions from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of node A in function FA and node B in function
       * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
       * level graph, the `original_func` is empty. This information, with the
       * `original_node_names` can be used to map errors originating at the
       * current ndoe to some top level source code.
       * </pre>
       *
       * <code>repeated string original_func_names = 2;</code>
       */
      public Builder setOriginalFuncNames(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOriginalFuncNamesIsMutable();
        originalFuncNames_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is intended to store the list of names of the functions from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of node A in function FA and node B in function
       * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
       * level graph, the `original_func` is empty. This information, with the
       * `original_node_names` can be used to map errors originating at the
       * current ndoe to some top level source code.
       * </pre>
       *
       * <code>repeated string original_func_names = 2;</code>
       */
      public Builder addOriginalFuncNames(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOriginalFuncNamesIsMutable();
        originalFuncNames_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is intended to store the list of names of the functions from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of node A in function FA and node B in function
       * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
       * level graph, the `original_func` is empty. This information, with the
       * `original_node_names` can be used to map errors originating at the
       * current ndoe to some top level source code.
       * </pre>
       *
       * <code>repeated string original_func_names = 2;</code>
       */
      public Builder addAllOriginalFuncNames(
          java.lang.Iterable<java.lang.String> values) {
        ensureOriginalFuncNamesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, originalFuncNames_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is intended to store the list of names of the functions from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of node A in function FA and node B in function
       * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
       * level graph, the `original_func` is empty. This information, with the
       * `original_node_names` can be used to map errors originating at the
       * current ndoe to some top level source code.
       * </pre>
       *
       * <code>repeated string original_func_names = 2;</code>
       */
      public Builder clearOriginalFuncNames() {
        originalFuncNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is intended to store the list of names of the functions from the
       * original graph that this node was derived. For example if this node, say
       * C, was result of a fusion of node A in function FA and node B in function
       * FB, then `original_funcs` would be {FA, FB}. If the node is in the top
       * level graph, the `original_func` is empty. This information, with the
       * `original_node_names` can be used to map errors originating at the
       * current ndoe to some top level source code.
       * </pre>
       *
       * <code>repeated string original_func_names = 2;</code>
       */
      public Builder addOriginalFuncNamesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureOriginalFuncNamesIsMutable();
        originalFuncNames_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.NodeDef.ExperimentalDebugInfo)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.NodeDef.ExperimentalDebugInfo)
    private static final org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo();
    }

    public static org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExperimentalDebugInfo>
        PARSER = new com.google.protobuf.AbstractParser<ExperimentalDebugInfo>() {
      @java.lang.Override
      public ExperimentalDebugInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExperimentalDebugInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExperimentalDebugInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExperimentalDebugInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * The name given to this operator. Used for naming inputs,
   * logging, visualization, etc.  Unique within a single GraphDef.
   * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_&gt;./]*".
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name given to this operator. Used for naming inputs,
   * logging, visualization, etc.  Unique within a single GraphDef.
   * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_&gt;./]*".
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OP_FIELD_NUMBER = 2;
  private volatile java.lang.Object op_;
  /**
   * <pre>
   * The operation name.  There may be custom parameters in attrs.
   * Op names starting with an underscore are reserved for internal use.
   * </pre>
   *
   * <code>string op = 2;</code>
   */
  public java.lang.String getOp() {
    java.lang.Object ref = op_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      op_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The operation name.  There may be custom parameters in attrs.
   * Op names starting with an underscore are reserved for internal use.
   * </pre>
   *
   * <code>string op = 2;</code>
   */
  public com.google.protobuf.ByteString
      getOpBytes() {
    java.lang.Object ref = op_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      op_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INPUT_FIELD_NUMBER = 3;
  private com.google.protobuf.LazyStringList input_;
  /**
   * <pre>
   * Each input is "node:src_output" with "node" being a string name and
   * "src_output" indicating which output tensor to use from "node". If
   * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
   * may optionally be followed by control inputs that have the format
   * "^node".
   * </pre>
   *
   * <code>repeated string input = 3;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getInputList() {
    return input_;
  }
  /**
   * <pre>
   * Each input is "node:src_output" with "node" being a string name and
   * "src_output" indicating which output tensor to use from "node". If
   * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
   * may optionally be followed by control inputs that have the format
   * "^node".
   * </pre>
   *
   * <code>repeated string input = 3;</code>
   */
  public int getInputCount() {
    return input_.size();
  }
  /**
   * <pre>
   * Each input is "node:src_output" with "node" being a string name and
   * "src_output" indicating which output tensor to use from "node". If
   * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
   * may optionally be followed by control inputs that have the format
   * "^node".
   * </pre>
   *
   * <code>repeated string input = 3;</code>
   */
  public java.lang.String getInput(int index) {
    return input_.get(index);
  }
  /**
   * <pre>
   * Each input is "node:src_output" with "node" being a string name and
   * "src_output" indicating which output tensor to use from "node". If
   * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
   * may optionally be followed by control inputs that have the format
   * "^node".
   * </pre>
   *
   * <code>repeated string input = 3;</code>
   */
  public com.google.protobuf.ByteString
      getInputBytes(int index) {
    return input_.getByteString(index);
  }

  public static final int DEVICE_FIELD_NUMBER = 4;
  private volatile java.lang.Object device_;
  /**
   * <pre>
   * A (possibly partial) specification for the device on which this
   * node should be placed.
   * The expected syntax for this string is as follows:
   * DEVICE_SPEC ::= PARTIAL_SPEC
   * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
   * CONSTRAINT ::= ("job:" JOB_NAME)
   *              | ("replica:" [1-9][0-9]*)
   *              | ("task:" [1-9][0-9]*)
   *              | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
   * Valid values for this string include:
   * * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
   * * "/job:worker/device:GPU:3"                   (partial specification)
   * * ""                                    (no specification)
   * If the constraints do not resolve to a single device (or if this
   * field is empty or not present), the runtime will attempt to
   * choose a device automatically.
   * </pre>
   *
   * <code>string device = 4;</code>
   */
  public java.lang.String getDevice() {
    java.lang.Object ref = device_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      device_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * A (possibly partial) specification for the device on which this
   * node should be placed.
   * The expected syntax for this string is as follows:
   * DEVICE_SPEC ::= PARTIAL_SPEC
   * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
   * CONSTRAINT ::= ("job:" JOB_NAME)
   *              | ("replica:" [1-9][0-9]*)
   *              | ("task:" [1-9][0-9]*)
   *              | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
   * Valid values for this string include:
   * * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
   * * "/job:worker/device:GPU:3"                   (partial specification)
   * * ""                                    (no specification)
   * If the constraints do not resolve to a single device (or if this
   * field is empty or not present), the runtime will attempt to
   * choose a device automatically.
   * </pre>
   *
   * <code>string device = 4;</code>
   */
  public com.google.protobuf.ByteString
      getDeviceBytes() {
    java.lang.Object ref = device_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      device_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ATTR_FIELD_NUMBER = 5;
  private static final class AttrDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, org.tensorflow.proto.framework.AttrValue> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, org.tensorflow.proto.framework.AttrValue>newDefaultInstance(
                org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_AttrEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                org.tensorflow.proto.framework.AttrValue.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, org.tensorflow.proto.framework.AttrValue> attr_;
  private com.google.protobuf.MapField<java.lang.String, org.tensorflow.proto.framework.AttrValue>
  internalGetAttr() {
    if (attr_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          AttrDefaultEntryHolder.defaultEntry);
    }
    return attr_;
  }

  public int getAttrCount() {
    return internalGetAttr().getMap().size();
  }
  /**
   * <pre>
   * Operation-specific graph-construction-time configuration.
   * Note that this should include all attrs defined in the
   * corresponding OpDef, including those with a value matching
   * the default -- this allows the default to change and makes
   * NodeDefs easier to interpret on their own.  However, if
   * an attr with a default is not specified in this list, the
   * default will be used.
   * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
   * one of the names from the corresponding OpDef's attr field).
   * The values must have a type matching the corresponding OpDef
   * attr's type field.
   * TODO(josh11b): Add some examples here showing best practices.
   * </pre>
   *
   * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
   */

  public boolean containsAttr(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetAttr().getMap().containsKey(key);
  }
  /**
   * Use {@link #getAttrMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, org.tensorflow.proto.framework.AttrValue> getAttr() {
    return getAttrMap();
  }
  /**
   * <pre>
   * Operation-specific graph-construction-time configuration.
   * Note that this should include all attrs defined in the
   * corresponding OpDef, including those with a value matching
   * the default -- this allows the default to change and makes
   * NodeDefs easier to interpret on their own.  However, if
   * an attr with a default is not specified in this list, the
   * default will be used.
   * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
   * one of the names from the corresponding OpDef's attr field).
   * The values must have a type matching the corresponding OpDef
   * attr's type field.
   * TODO(josh11b): Add some examples here showing best practices.
   * </pre>
   *
   * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
   */

  public java.util.Map<java.lang.String, org.tensorflow.proto.framework.AttrValue> getAttrMap() {
    return internalGetAttr().getMap();
  }
  /**
   * <pre>
   * Operation-specific graph-construction-time configuration.
   * Note that this should include all attrs defined in the
   * corresponding OpDef, including those with a value matching
   * the default -- this allows the default to change and makes
   * NodeDefs easier to interpret on their own.  However, if
   * an attr with a default is not specified in this list, the
   * default will be used.
   * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
   * one of the names from the corresponding OpDef's attr field).
   * The values must have a type matching the corresponding OpDef
   * attr's type field.
   * TODO(josh11b): Add some examples here showing best practices.
   * </pre>
   *
   * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
   */

  public org.tensorflow.proto.framework.AttrValue getAttrOrDefault(
      java.lang.String key,
      org.tensorflow.proto.framework.AttrValue defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, org.tensorflow.proto.framework.AttrValue> map =
        internalGetAttr().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Operation-specific graph-construction-time configuration.
   * Note that this should include all attrs defined in the
   * corresponding OpDef, including those with a value matching
   * the default -- this allows the default to change and makes
   * NodeDefs easier to interpret on their own.  However, if
   * an attr with a default is not specified in this list, the
   * default will be used.
   * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
   * one of the names from the corresponding OpDef's attr field).
   * The values must have a type matching the corresponding OpDef
   * attr's type field.
   * TODO(josh11b): Add some examples here showing best practices.
   * </pre>
   *
   * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
   */

  public org.tensorflow.proto.framework.AttrValue getAttrOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, org.tensorflow.proto.framework.AttrValue> map =
        internalGetAttr().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int EXPERIMENTAL_DEBUG_INFO_FIELD_NUMBER = 6;
  private org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo experimentalDebugInfo_;
  /**
   * <pre>
   * This stores debug information associated with the node.
   * </pre>
   *
   * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
   */
  public boolean hasExperimentalDebugInfo() {
    return experimentalDebugInfo_ != null;
  }
  /**
   * <pre>
   * This stores debug information associated with the node.
   * </pre>
   *
   * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
   */
  public org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo getExperimentalDebugInfo() {
    return experimentalDebugInfo_ == null ? org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.getDefaultInstance() : experimentalDebugInfo_;
  }
  /**
   * <pre>
   * This stores debug information associated with the node.
   * </pre>
   *
   * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
   */
  public org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfoOrBuilder getExperimentalDebugInfoOrBuilder() {
    return getExperimentalDebugInfo();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (!getOpBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, op_);
    }
    for (int i = 0; i < input_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, input_.getRaw(i));
    }
    if (!getDeviceBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, device_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetAttr(),
        AttrDefaultEntryHolder.defaultEntry,
        5);
    if (experimentalDebugInfo_ != null) {
      output.writeMessage(6, getExperimentalDebugInfo());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (!getOpBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, op_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < input_.size(); i++) {
        dataSize += computeStringSizeNoTag(input_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getInputList().size();
    }
    if (!getDeviceBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, device_);
    }
    for (java.util.Map.Entry<java.lang.String, org.tensorflow.proto.framework.AttrValue> entry
         : internalGetAttr().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, org.tensorflow.proto.framework.AttrValue>
      attr__ = AttrDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, attr__);
    }
    if (experimentalDebugInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getExperimentalDebugInfo());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.tensorflow.proto.framework.NodeDef)) {
      return super.equals(obj);
    }
    org.tensorflow.proto.framework.NodeDef other = (org.tensorflow.proto.framework.NodeDef) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (!getOp()
        .equals(other.getOp())) return false;
    if (!getInputList()
        .equals(other.getInputList())) return false;
    if (!getDevice()
        .equals(other.getDevice())) return false;
    if (!internalGetAttr().equals(
        other.internalGetAttr())) return false;
    if (hasExperimentalDebugInfo() != other.hasExperimentalDebugInfo()) return false;
    if (hasExperimentalDebugInfo()) {
      if (!getExperimentalDebugInfo()
          .equals(other.getExperimentalDebugInfo())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + OP_FIELD_NUMBER;
    hash = (53 * hash) + getOp().hashCode();
    if (getInputCount() > 0) {
      hash = (37 * hash) + INPUT_FIELD_NUMBER;
      hash = (53 * hash) + getInputList().hashCode();
    }
    hash = (37 * hash) + DEVICE_FIELD_NUMBER;
    hash = (53 * hash) + getDevice().hashCode();
    if (!internalGetAttr().getMap().isEmpty()) {
      hash = (37 * hash) + ATTR_FIELD_NUMBER;
      hash = (53 * hash) + internalGetAttr().hashCode();
    }
    if (hasExperimentalDebugInfo()) {
      hash = (37 * hash) + EXPERIMENTAL_DEBUG_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getExperimentalDebugInfo().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.tensorflow.proto.framework.NodeDef parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.proto.framework.NodeDef parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.proto.framework.NodeDef parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.proto.framework.NodeDef parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.proto.framework.NodeDef parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.proto.framework.NodeDef parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.proto.framework.NodeDef parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tensorflow.proto.framework.NodeDef parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tensorflow.proto.framework.NodeDef parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.tensorflow.proto.framework.NodeDef parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tensorflow.proto.framework.NodeDef parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tensorflow.proto.framework.NodeDef parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.tensorflow.proto.framework.NodeDef prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code tensorflow.NodeDef}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:tensorflow.NodeDef)
      org.tensorflow.proto.framework.NodeDefOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetAttr();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetMutableAttr();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.proto.framework.NodeDef.class, org.tensorflow.proto.framework.NodeDef.Builder.class);
    }

    // Construct using org.tensorflow.proto.framework.NodeDef.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      op_ = "";

      input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      device_ = "";

      internalGetMutableAttr().clear();
      if (experimentalDebugInfoBuilder_ == null) {
        experimentalDebugInfo_ = null;
      } else {
        experimentalDebugInfo_ = null;
        experimentalDebugInfoBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.tensorflow.proto.framework.NodeProto.internal_static_tensorflow_NodeDef_descriptor;
    }

    @java.lang.Override
    public org.tensorflow.proto.framework.NodeDef getDefaultInstanceForType() {
      return org.tensorflow.proto.framework.NodeDef.getDefaultInstance();
    }

    @java.lang.Override
    public org.tensorflow.proto.framework.NodeDef build() {
      org.tensorflow.proto.framework.NodeDef result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.tensorflow.proto.framework.NodeDef buildPartial() {
      org.tensorflow.proto.framework.NodeDef result = new org.tensorflow.proto.framework.NodeDef(this);
      int from_bitField0_ = bitField0_;
      result.name_ = name_;
      result.op_ = op_;
      if (((bitField0_ & 0x00000001) != 0)) {
        input_ = input_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.input_ = input_;
      result.device_ = device_;
      result.attr_ = internalGetAttr();
      result.attr_.makeImmutable();
      if (experimentalDebugInfoBuilder_ == null) {
        result.experimentalDebugInfo_ = experimentalDebugInfo_;
      } else {
        result.experimentalDebugInfo_ = experimentalDebugInfoBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.tensorflow.proto.framework.NodeDef) {
        return mergeFrom((org.tensorflow.proto.framework.NodeDef)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.tensorflow.proto.framework.NodeDef other) {
      if (other == org.tensorflow.proto.framework.NodeDef.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.getOp().isEmpty()) {
        op_ = other.op_;
        onChanged();
      }
      if (!other.input_.isEmpty()) {
        if (input_.isEmpty()) {
          input_ = other.input_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureInputIsMutable();
          input_.addAll(other.input_);
        }
        onChanged();
      }
      if (!other.getDevice().isEmpty()) {
        device_ = other.device_;
        onChanged();
      }
      internalGetMutableAttr().mergeFrom(
          other.internalGetAttr());
      if (other.hasExperimentalDebugInfo()) {
        mergeExperimentalDebugInfo(other.getExperimentalDebugInfo());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.tensorflow.proto.framework.NodeDef parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.tensorflow.proto.framework.NodeDef) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_&gt;./]*".
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_&gt;./]*".
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_&gt;./]*".
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_&gt;./]*".
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_&gt;./]*".
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object op_ = "";
    /**
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     *
     * <code>string op = 2;</code>
     */
    public java.lang.String getOp() {
      java.lang.Object ref = op_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        op_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     *
     * <code>string op = 2;</code>
     */
    public com.google.protobuf.ByteString
        getOpBytes() {
      java.lang.Object ref = op_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        op_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     *
     * <code>string op = 2;</code>
     */
    public Builder setOp(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      op_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     *
     * <code>string op = 2;</code>
     */
    public Builder clearOp() {
      
      op_ = getDefaultInstance().getOp();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     *
     * <code>string op = 2;</code>
     */
    public Builder setOpBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      op_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureInputIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        input_ = new com.google.protobuf.LazyStringArrayList(input_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getInputList() {
      return input_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     */
    public int getInputCount() {
      return input_.size();
    }
    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     */
    public java.lang.String getInput(int index) {
      return input_.get(index);
    }
    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     */
    public com.google.protobuf.ByteString
        getInputBytes(int index) {
      return input_.getByteString(index);
    }
    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     */
    public Builder setInput(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
      input_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     */
    public Builder addInput(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
      input_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     */
    public Builder addAllInput(
        java.lang.Iterable<java.lang.String> values) {
      ensureInputIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, input_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     */
    public Builder clearInput() {
      input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     */
    public Builder addInputBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureInputIsMutable();
      input_.add(value);
      onChanged();
      return this;
    }

    private java.lang.Object device_ = "";
    /**
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= PARTIAL_SPEC
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
     * * "/job:worker/device:GPU:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     *
     * <code>string device = 4;</code>
     */
    public java.lang.String getDevice() {
      java.lang.Object ref = device_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        device_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= PARTIAL_SPEC
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
     * * "/job:worker/device:GPU:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     *
     * <code>string device = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDeviceBytes() {
      java.lang.Object ref = device_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        device_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= PARTIAL_SPEC
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
     * * "/job:worker/device:GPU:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     *
     * <code>string device = 4;</code>
     */
    public Builder setDevice(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      device_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= PARTIAL_SPEC
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
     * * "/job:worker/device:GPU:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     *
     * <code>string device = 4;</code>
     */
    public Builder clearDevice() {
      
      device_ = getDefaultInstance().getDevice();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= PARTIAL_SPEC
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
     * * "/job:worker/device:GPU:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     *
     * <code>string device = 4;</code>
     */
    public Builder setDeviceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      device_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, org.tensorflow.proto.framework.AttrValue> attr_;
    private com.google.protobuf.MapField<java.lang.String, org.tensorflow.proto.framework.AttrValue>
    internalGetAttr() {
      if (attr_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AttrDefaultEntryHolder.defaultEntry);
      }
      return attr_;
    }
    private com.google.protobuf.MapField<java.lang.String, org.tensorflow.proto.framework.AttrValue>
    internalGetMutableAttr() {
      onChanged();;
      if (attr_ == null) {
        attr_ = com.google.protobuf.MapField.newMapField(
            AttrDefaultEntryHolder.defaultEntry);
      }
      if (!attr_.isMutable()) {
        attr_ = attr_.copy();
      }
      return attr_;
    }

    public int getAttrCount() {
      return internalGetAttr().getMap().size();
    }
    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */

    public boolean containsAttr(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetAttr().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAttrMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.tensorflow.proto.framework.AttrValue> getAttr() {
      return getAttrMap();
    }
    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */

    public java.util.Map<java.lang.String, org.tensorflow.proto.framework.AttrValue> getAttrMap() {
      return internalGetAttr().getMap();
    }
    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */

    public org.tensorflow.proto.framework.AttrValue getAttrOrDefault(
        java.lang.String key,
        org.tensorflow.proto.framework.AttrValue defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, org.tensorflow.proto.framework.AttrValue> map =
          internalGetAttr().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */

    public org.tensorflow.proto.framework.AttrValue getAttrOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, org.tensorflow.proto.framework.AttrValue> map =
          internalGetAttr().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearAttr() {
      internalGetMutableAttr().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */

    public Builder removeAttr(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableAttr().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.tensorflow.proto.framework.AttrValue>
    getMutableAttr() {
      return internalGetMutableAttr().getMutableMap();
    }
    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */
    public Builder putAttr(
        java.lang.String key,
        org.tensorflow.proto.framework.AttrValue value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableAttr().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */

    public Builder putAllAttr(
        java.util.Map<java.lang.String, org.tensorflow.proto.framework.AttrValue> values) {
      internalGetMutableAttr().getMutableMap()
          .putAll(values);
      return this;
    }

    private org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo experimentalDebugInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo, org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.Builder, org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfoOrBuilder> experimentalDebugInfoBuilder_;
    /**
     * <pre>
     * This stores debug information associated with the node.
     * </pre>
     *
     * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
     */
    public boolean hasExperimentalDebugInfo() {
      return experimentalDebugInfoBuilder_ != null || experimentalDebugInfo_ != null;
    }
    /**
     * <pre>
     * This stores debug information associated with the node.
     * </pre>
     *
     * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
     */
    public org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo getExperimentalDebugInfo() {
      if (experimentalDebugInfoBuilder_ == null) {
        return experimentalDebugInfo_ == null ? org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.getDefaultInstance() : experimentalDebugInfo_;
      } else {
        return experimentalDebugInfoBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * This stores debug information associated with the node.
     * </pre>
     *
     * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
     */
    public Builder setExperimentalDebugInfo(org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo value) {
      if (experimentalDebugInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        experimentalDebugInfo_ = value;
        onChanged();
      } else {
        experimentalDebugInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * This stores debug information associated with the node.
     * </pre>
     *
     * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
     */
    public Builder setExperimentalDebugInfo(
        org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.Builder builderForValue) {
      if (experimentalDebugInfoBuilder_ == null) {
        experimentalDebugInfo_ = builderForValue.build();
        onChanged();
      } else {
        experimentalDebugInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * This stores debug information associated with the node.
     * </pre>
     *
     * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
     */
    public Builder mergeExperimentalDebugInfo(org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo value) {
      if (experimentalDebugInfoBuilder_ == null) {
        if (experimentalDebugInfo_ != null) {
          experimentalDebugInfo_ =
            org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.newBuilder(experimentalDebugInfo_).mergeFrom(value).buildPartial();
        } else {
          experimentalDebugInfo_ = value;
        }
        onChanged();
      } else {
        experimentalDebugInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * This stores debug information associated with the node.
     * </pre>
     *
     * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
     */
    public Builder clearExperimentalDebugInfo() {
      if (experimentalDebugInfoBuilder_ == null) {
        experimentalDebugInfo_ = null;
        onChanged();
      } else {
        experimentalDebugInfo_ = null;
        experimentalDebugInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * This stores debug information associated with the node.
     * </pre>
     *
     * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
     */
    public org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.Builder getExperimentalDebugInfoBuilder() {
      
      onChanged();
      return getExperimentalDebugInfoFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This stores debug information associated with the node.
     * </pre>
     *
     * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
     */
    public org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfoOrBuilder getExperimentalDebugInfoOrBuilder() {
      if (experimentalDebugInfoBuilder_ != null) {
        return experimentalDebugInfoBuilder_.getMessageOrBuilder();
      } else {
        return experimentalDebugInfo_ == null ?
            org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.getDefaultInstance() : experimentalDebugInfo_;
      }
    }
    /**
     * <pre>
     * This stores debug information associated with the node.
     * </pre>
     *
     * <code>.tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo, org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.Builder, org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfoOrBuilder> 
        getExperimentalDebugInfoFieldBuilder() {
      if (experimentalDebugInfoBuilder_ == null) {
        experimentalDebugInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo, org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfo.Builder, org.tensorflow.proto.framework.NodeDef.ExperimentalDebugInfoOrBuilder>(
                getExperimentalDebugInfo(),
                getParentForChildren(),
                isClean());
        experimentalDebugInfo_ = null;
      }
      return experimentalDebugInfoBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:tensorflow.NodeDef)
  }

  // @@protoc_insertion_point(class_scope:tensorflow.NodeDef)
  private static final org.tensorflow.proto.framework.NodeDef DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.tensorflow.proto.framework.NodeDef();
  }

  public static org.tensorflow.proto.framework.NodeDef getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<NodeDef>
      PARSER = new com.google.protobuf.AbstractParser<NodeDef>() {
    @java.lang.Override
    public NodeDef parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new NodeDef(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<NodeDef> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<NodeDef> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.tensorflow.proto.framework.NodeDef getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

