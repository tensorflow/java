// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/trace_events.proto

package org.tensorflow.proto.framework;

public interface TraceEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:tensorflow.profiler.TraceEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The id of the device that this event occurred on. The full dataset should
   * have this device present in the Trace object.
   * </pre>
   *
   * <code>uint32 device_id = 1;</code>
   */
  int getDeviceId();

  /**
   * <pre>
   * The id of the resource that this event occurred on. The full dataset should
   * have this resource present in the Device object of the Trace object. A
   * resource_id is unique on a specific device, but not necessarily within the
   * trace.
   * </pre>
   *
   * <code>uint32 resource_id = 2;</code>
   */
  int getResourceId();

  /**
   * <pre>
   * The name of this trace event.
   * </pre>
   *
   * <code>string name = 3;</code>
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of this trace event.
   * </pre>
   *
   * <code>string name = 3;</code>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The timestamp that this event occurred at (in picos since tracing started).
   * </pre>
   *
   * <code>uint64 timestamp_ps = 9;</code>
   */
  long getTimestampPs();

  /**
   * <pre>
   * The duration of the event in picoseconds if applicable.
   * Events without duration are called instant events.
   * </pre>
   *
   * <code>uint64 duration_ps = 10;</code>
   */
  long getDurationPs();

  /**
   * <pre>
   * Extra arguments that will be displayed in trace view.
   * </pre>
   *
   * <code>map&lt;string, string&gt; args = 11;</code>
   */
  int getArgsCount();
  /**
   * <pre>
   * Extra arguments that will be displayed in trace view.
   * </pre>
   *
   * <code>map&lt;string, string&gt; args = 11;</code>
   */
  boolean containsArgs(
      java.lang.String key);
  /**
   * Use {@link #getArgsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getArgs();
  /**
   * <pre>
   * Extra arguments that will be displayed in trace view.
   * </pre>
   *
   * <code>map&lt;string, string&gt; args = 11;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getArgsMap();
  /**
   * <pre>
   * Extra arguments that will be displayed in trace view.
   * </pre>
   *
   * <code>map&lt;string, string&gt; args = 11;</code>
   */

  java.lang.String getArgsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * Extra arguments that will be displayed in trace view.
   * </pre>
   *
   * <code>map&lt;string, string&gt; args = 11;</code>
   */

  java.lang.String getArgsOrThrow(
      java.lang.String key);
}
