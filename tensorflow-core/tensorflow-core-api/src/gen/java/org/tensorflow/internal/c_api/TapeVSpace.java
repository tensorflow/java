// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.tensorflow.internal.c_api;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.tensorflow.internal.c_api.global.tensorflow.*;


// Operations the tape needs to perform on tensors to do backpropagation. Named
// "vspace" because a subset of these are related to a vector space, such as
// adding gradients, getting zeroes, etc. Currently cannot be implemented
// without using tensorflow python code, hence left unspecified here.
//
// Gradient is the type returned by gradient functions. In Python TF it's either
// Tensor or IndexedSlices or None, which here we map to nullptr. Gradients need
// to allow their size to be computed and they need to be passable to a backward
// function and deleted (as the backprop code creates lots of gradients the user
// is not interested in).
//
// BackwardFunction needs to be a closure which stores intermediate activations
// from the forward computation and calls a vector-jacobian product function
// (also known as adjoint function) to compute, given downstream gradients,
// upstream gradients.
//
// TODO(apassos) provide concrete template instantiations for TFE_TensorHandle
// specialization, which is blocked by quite a few things needing to loop back
// into python now.
@Name("tensorflow::eager::VSpace<tensorflow::AbstractTensorHandle,tensorflow::gradients::GradientFunction,tensorflow::gradients::TapeTensor>") @Properties(inherit = org.tensorflow.internal.c_api.presets.tensorflow.class)
public class TapeVSpace extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TapeVSpace(Pointer p) { super(p); }


  // Returns the number of elements in the gradient tensor.
  public native @Cast("tensorflow::int64") long NumElements(AbstractTensorHandle tensor);

  // Consumes references to the tensors in the gradient_tensors list and returns
  // a tensor with the result.
  public native AbstractTensorHandle AggregateGradients(
        @Cast("tensorflow::AbstractTensorHandle**") @Span PointerPointer<AbstractTensorHandle> gradient_tensors);

  // Calls the passed-in backward function.
  //
  // `unneeded_gradients` contains sorted list of input indices for which a
  // gradient is not required.
  public native @ByVal Status CallBackwardFunction(
        @StdString String op_type, GradientFunction backward_function,
        @Cast("tensorflow::int64*") @StdVector LongPointer unneeded_gradients,
        @Cast("tensorflow::AbstractTensorHandle**") @Span PointerPointer<AbstractTensorHandle> output_gradients,
        @Cast("tensorflow::AbstractTensorHandle**") @Span PointerPointer<AbstractTensorHandle> result);

  // Builds a tensor filled with ones with the same shape and dtype as `t`.
  public native @ByVal Status BuildOnesLike(@Const @ByRef TapeTensor t,
        @Cast("tensorflow::AbstractTensorHandle**") PointerPointer<AbstractTensorHandle> result);

  // Looks up the ID of a Gradient.
  public native @Cast("tensorflow::int64") long TensorId(AbstractTensorHandle tensor);

  // Converts a Gradient to a TapeTensor.
  public native @ByVal TapeTensor TapeTensorFromGradient(AbstractTensorHandle gradient);

  // Marks the following gradient as a result so it's not consumed by backward
  // functions.
  public native void MarkAsResult(AbstractTensorHandle gradient);

  // Deletes the input tensor.
  public native void DeleteGradient(AbstractTensorHandle gradient);
}
