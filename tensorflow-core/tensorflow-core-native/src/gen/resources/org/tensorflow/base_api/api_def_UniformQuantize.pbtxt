op {
  graph_op_name: "UniformQuantize"
  visibility: HIDDEN
  in_arg {
    name: "input"
    description: <<END
Must be a Tensor of Tin.
END
  }
  in_arg {
    name: "scales"
    description: <<END
The float value(s) to use as scale(s) to quantize `input`.
Must be a scalar Tensor if quantization_axis is -1 (per-tensor quantization), otherwise 1D Tensor of size (input.dim_size(quantization_axis),) (per-axis quantization).
END
  }
  in_arg {
    name: "zero_points"
    description: <<END
The int32 value(s) to use as zero_point(s) to quantize `input`.
Same shape condition as scales.
END
  }
  out_arg {
    name: "output"
    description: <<END
The output quantized Tensor of Tout, whose shape is same as input.
END
  }
  attr {
    name: "Tin"
    description: <<END
The type of input Tensor. A tf.DType from: tf.qint8, tf.qint32
END
  }
  attr {
    name: "Tout"
    description: <<END
The type of output Tensor. A tf.DType from: tf.float32
END
  }
  attr {
    name: "quantization_axis"
    description: <<END
Indicates the dimension index of the tensor where per-axis quantization is applied for the slices along that dimension.
If set to -1 (default), this indicates per-tensor quantization. Otherwise, it must be set within range [0, input.dims()).
END
  }
  attr {
    name: "quantization_min_val"
    description: <<END
The quantization min value to quantize `input`.
The purpose of this attribute is typically (but not limited to) to indicate narrow range, where this is set to:
`(Tin lowest) + 1` if narrow range, and `(Tin lowest)` otherwise.
For example, if Tin is qint8, this is set to -127 if narrow range quantized or -128 if not.
END
  }
  attr {
    name: "quantization_max_val"
    description: <<END
The quantization max value to quantize `input`.
The purpose of this attribute is typically (but not limited to) indicate narrow range, where this is set to:
`(Tout max)` for both narrow range and not narrow range.
For example, if Tin is qint8, this is set to 127.
END
  }
  summary: "Perform quantization on Tensor `input`."
  description: <<END
Given `input`, `scales` and `zero_points`, performs quantization using the formula:
quantized_data = floor(input_data * (1.0f / scale) + 0.5f) + zero_point
END
}
