op {
  graph_op_name: "DenseBincount"
  in_arg {
    name: "input"
    description: <<END
1D or 2D int `Tensor`.
END
  }
  in_arg {
    name: "size"
    description: <<END
non-negative int scalar `Tensor`.
END
  }
  in_arg {
    name: "weights"
    description: <<END
is an int32, int64, float32, or float64 `Tensor` with the same
shape as `arr`, or a length-0 `Tensor`, in which case it acts as all weights
equal to 1.
END
  }
  out_arg {
    name: "output"
    description: <<END
1D `Tensor` with length equal to `size` or 2D `Tensor` with [batch_size, `size`].
The counts or summed weights for each value in the range [0, size).
END
  }
  attr {
    name: "binary_output"
    description: <<END
bool; Whether the kernel should count the appearance or number of occurrences.
END
  }
  summary: "Counts the number of occurrences of each value in an integer array."
  description: <<END
Outputs a vector with length `size` and the same dtype as `weights`. If
`weights` are empty, then index `i` stores the number of times the value `i` is
counted in `arr`. If `weights` are non-empty, then index `i` stores the sum of
the value in `weights` at each index where the corresponding value in `arr` is
`i`.

Values in `arr` outside of the range [0, size) are ignored.
END
}
