// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.tensorflow.internal.c_api;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.tensorflow.internal.c_api.global.tensorflow.*;


// Struct to be filled in to define a custom device tensor handle. Fields are
// required except where indicated.
@Properties(inherit = org.tensorflow.internal.c_api.presets.tensorflow.class)
public class TFE_CustomDeviceTensorHandle extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TFE_CustomDeviceTensorHandle() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TFE_CustomDeviceTensorHandle(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TFE_CustomDeviceTensorHandle(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TFE_CustomDeviceTensorHandle position(long position) {
        return (TFE_CustomDeviceTensorHandle)super.position(position);
    }
    @Override public TFE_CustomDeviceTensorHandle getPointer(long i) {
        return new TFE_CustomDeviceTensorHandle((Pointer)this).offsetAddress(i);
    }

  public native int version(); public native TFE_CustomDeviceTensorHandle version(int setter);

  // Computes the rank of the tensor handle.
  //
  // Shapes are specified via callbacks because retrieving the shape of a tensor
  // is a blocking operation for async eager; custom devices should avoid
  // retrieving shapes of tensors they wrap until the custom device tensor's
  // shape is explicitly requested where possible.
  public static class Num_dims_Pointer_TF_Status extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Num_dims_Pointer_TF_Status(Pointer p) { super(p); }
      protected Num_dims_Pointer_TF_Status() { allocate(); }
      private native void allocate();
      public native int call(Pointer data, TF_Status status);
  }
  public native Num_dims_Pointer_TF_Status num_dims(); public native TFE_CustomDeviceTensorHandle num_dims(Num_dims_Pointer_TF_Status setter);

  // Computes the axis length at `dim_index`.
  public static class Dim_Pointer_int_TF_Status extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Dim_Pointer_int_TF_Status(Pointer p) { super(p); }
      protected Dim_Pointer_int_TF_Status() { allocate(); }
      private native void allocate();
      public native @Cast("int64_t") long call(Pointer data, int dim_index, TF_Status status);
  }
  public native Dim_Pointer_int_TF_Status dim(); public native TFE_CustomDeviceTensorHandle dim(Dim_Pointer_int_TF_Status setter);

  public static class Deallocator_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Deallocator_Pointer(Pointer p) { super(p); }
      protected Deallocator_Pointer() { allocate(); }
      private native void allocate();
      public native void call(Pointer data);
  }
  public native @Name("deallocator") Deallocator_Pointer cdt_deallocator(); public native TFE_CustomDeviceTensorHandle cdt_deallocator(Deallocator_Pointer setter);

  // Summarizes the value of this tensor. The caller takes ownership of the
  // returned buffer. If `status` is not TF_OK, instead returns a null pointer.
  //
  // Does not include the shape and dtype of the tensor (which is generally
  // appended later), but should include any information specific to this custom
  // device which would be useful for debugging.
  //
  // Optional. If null, defaults to resolving the TFE_TensorHandle into a
  // TF_Tensor and summarizing that.
  public static class Summarize_Pointer_TF_Status extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Summarize_Pointer_TF_Status(Pointer p) { super(p); }
      protected Summarize_Pointer_TF_Status() { allocate(); }
      private native void allocate();
      public native TF_Buffer call(Pointer data, TF_Status status);
  }
  public native Summarize_Pointer_TF_Status summarize(); public native TFE_CustomDeviceTensorHandle summarize(Summarize_Pointer_TF_Status setter);
}
