op {
  graph_op_name: "StatelessRandomGetKeyCounter"
  visibility: HIDDEN
  in_arg {
    name: "seed"
    description: <<END
2 seeds (shape [2]).
END
  }
  out_arg {
    name: "key"
    description: <<END
Key for the counter-based RNG algorithm (shape uint64[1]).
END
  }
  out_arg {
    name: "counter"
    description: <<END
Counter for the counter-based RNG algorithm. Since counter size is algorithm-dependent, this output will be right-padded with zeros to reach shape uint64[2] (the current maximal counter size among algorithms).
END
  }
  summary: "Scrambles seed into key and counter, using the best algorithm based on device."
  description: <<END
This op scrambles a shape-[2] seed into a key and a counter, both needed by counter-based RNG algorithms. The scrambing uses the best algorithm based on device. The scrambling is opaque but approximately satisfies the property that different seed results in different key/counter pair (which will in turn result in different random numbers).
END
}
