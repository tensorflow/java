// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/profiler/protobuf/xplane.proto

package org.tensorflow.proto.profiler;

public final class Xplane {
  private Xplane() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface XSpaceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.profiler.XSpace)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
     */
    java.util.List<org.tensorflow.proto.profiler.Xplane.XPlane> 
        getPlanesList();
    /**
     * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XPlane getPlanes(int index);
    /**
     * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
     */
    int getPlanesCount();
    /**
     * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
     */
    java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XPlaneOrBuilder> 
        getPlanesOrBuilderList();
    /**
     * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XPlaneOrBuilder getPlanesOrBuilder(
        int index);

    /**
     * <pre>
     * Errors (if any) in the generation of planes.
     * </pre>
     *
     * <code>repeated string errors = 2;</code>
     * @return A list containing the errors.
     */
    java.util.List<java.lang.String>
        getErrorsList();
    /**
     * <pre>
     * Errors (if any) in the generation of planes.
     * </pre>
     *
     * <code>repeated string errors = 2;</code>
     * @return The count of errors.
     */
    int getErrorsCount();
    /**
     * <pre>
     * Errors (if any) in the generation of planes.
     * </pre>
     *
     * <code>repeated string errors = 2;</code>
     * @param index The index of the element to return.
     * @return The errors at the given index.
     */
    java.lang.String getErrors(int index);
    /**
     * <pre>
     * Errors (if any) in the generation of planes.
     * </pre>
     *
     * <code>repeated string errors = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the errors at the given index.
     */
    com.google.protobuf.ByteString
        getErrorsBytes(int index);

    /**
     * <pre>
     * Warnings (if any) in the generation of planes;
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @return A list containing the warnings.
     */
    java.util.List<java.lang.String>
        getWarningsList();
    /**
     * <pre>
     * Warnings (if any) in the generation of planes;
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @return The count of warnings.
     */
    int getWarningsCount();
    /**
     * <pre>
     * Warnings (if any) in the generation of planes;
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @param index The index of the element to return.
     * @return The warnings at the given index.
     */
    java.lang.String getWarnings(int index);
    /**
     * <pre>
     * Warnings (if any) in the generation of planes;
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the warnings at the given index.
     */
    com.google.protobuf.ByteString
        getWarningsBytes(int index);

    /**
     * <pre>
     * List of hostnames that XPlanes are generated from.
     * </pre>
     *
     * <code>repeated string hostnames = 4;</code>
     * @return A list containing the hostnames.
     */
    java.util.List<java.lang.String>
        getHostnamesList();
    /**
     * <pre>
     * List of hostnames that XPlanes are generated from.
     * </pre>
     *
     * <code>repeated string hostnames = 4;</code>
     * @return The count of hostnames.
     */
    int getHostnamesCount();
    /**
     * <pre>
     * List of hostnames that XPlanes are generated from.
     * </pre>
     *
     * <code>repeated string hostnames = 4;</code>
     * @param index The index of the element to return.
     * @return The hostnames at the given index.
     */
    java.lang.String getHostnames(int index);
    /**
     * <pre>
     * List of hostnames that XPlanes are generated from.
     * </pre>
     *
     * <code>repeated string hostnames = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the hostnames at the given index.
     */
    com.google.protobuf.ByteString
        getHostnamesBytes(int index);
  }
  /**
   * <pre>
   * A container of parallel XPlanes, generated by one or more profiling sources.
   * Next ID: 5
   * </pre>
   *
   * Protobuf type {@code tensorflow.profiler.XSpace}
   */
  public static final class XSpace extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.profiler.XSpace)
      XSpaceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XSpace.newBuilder() to construct.
    private XSpace(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XSpace() {
      planes_ = java.util.Collections.emptyList();
      errors_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      warnings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      hostnames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new XSpace();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XSpace_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XSpace_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.proto.profiler.Xplane.XSpace.class, org.tensorflow.proto.profiler.Xplane.XSpace.Builder.class);
    }

    public static final int PLANES_FIELD_NUMBER = 1;
    private java.util.List<org.tensorflow.proto.profiler.Xplane.XPlane> planes_;
    /**
     * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.tensorflow.proto.profiler.Xplane.XPlane> getPlanesList() {
      return planes_;
    }
    /**
     * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XPlaneOrBuilder> 
        getPlanesOrBuilderList() {
      return planes_;
    }
    /**
     * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
     */
    @java.lang.Override
    public int getPlanesCount() {
      return planes_.size();
    }
    /**
     * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XPlane getPlanes(int index) {
      return planes_.get(index);
    }
    /**
     * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XPlaneOrBuilder getPlanesOrBuilder(
        int index) {
      return planes_.get(index);
    }

    public static final int ERRORS_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList errors_;
    /**
     * <pre>
     * Errors (if any) in the generation of planes.
     * </pre>
     *
     * <code>repeated string errors = 2;</code>
     * @return A list containing the errors.
     */
    public com.google.protobuf.ProtocolStringList
        getErrorsList() {
      return errors_;
    }
    /**
     * <pre>
     * Errors (if any) in the generation of planes.
     * </pre>
     *
     * <code>repeated string errors = 2;</code>
     * @return The count of errors.
     */
    public int getErrorsCount() {
      return errors_.size();
    }
    /**
     * <pre>
     * Errors (if any) in the generation of planes.
     * </pre>
     *
     * <code>repeated string errors = 2;</code>
     * @param index The index of the element to return.
     * @return The errors at the given index.
     */
    public java.lang.String getErrors(int index) {
      return errors_.get(index);
    }
    /**
     * <pre>
     * Errors (if any) in the generation of planes.
     * </pre>
     *
     * <code>repeated string errors = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the errors at the given index.
     */
    public com.google.protobuf.ByteString
        getErrorsBytes(int index) {
      return errors_.getByteString(index);
    }

    public static final int WARNINGS_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList warnings_;
    /**
     * <pre>
     * Warnings (if any) in the generation of planes;
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @return A list containing the warnings.
     */
    public com.google.protobuf.ProtocolStringList
        getWarningsList() {
      return warnings_;
    }
    /**
     * <pre>
     * Warnings (if any) in the generation of planes;
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @return The count of warnings.
     */
    public int getWarningsCount() {
      return warnings_.size();
    }
    /**
     * <pre>
     * Warnings (if any) in the generation of planes;
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @param index The index of the element to return.
     * @return The warnings at the given index.
     */
    public java.lang.String getWarnings(int index) {
      return warnings_.get(index);
    }
    /**
     * <pre>
     * Warnings (if any) in the generation of planes;
     * </pre>
     *
     * <code>repeated string warnings = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the warnings at the given index.
     */
    public com.google.protobuf.ByteString
        getWarningsBytes(int index) {
      return warnings_.getByteString(index);
    }

    public static final int HOSTNAMES_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList hostnames_;
    /**
     * <pre>
     * List of hostnames that XPlanes are generated from.
     * </pre>
     *
     * <code>repeated string hostnames = 4;</code>
     * @return A list containing the hostnames.
     */
    public com.google.protobuf.ProtocolStringList
        getHostnamesList() {
      return hostnames_;
    }
    /**
     * <pre>
     * List of hostnames that XPlanes are generated from.
     * </pre>
     *
     * <code>repeated string hostnames = 4;</code>
     * @return The count of hostnames.
     */
    public int getHostnamesCount() {
      return hostnames_.size();
    }
    /**
     * <pre>
     * List of hostnames that XPlanes are generated from.
     * </pre>
     *
     * <code>repeated string hostnames = 4;</code>
     * @param index The index of the element to return.
     * @return The hostnames at the given index.
     */
    public java.lang.String getHostnames(int index) {
      return hostnames_.get(index);
    }
    /**
     * <pre>
     * List of hostnames that XPlanes are generated from.
     * </pre>
     *
     * <code>repeated string hostnames = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the hostnames at the given index.
     */
    public com.google.protobuf.ByteString
        getHostnamesBytes(int index) {
      return hostnames_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < planes_.size(); i++) {
        output.writeMessage(1, planes_.get(i));
      }
      for (int i = 0; i < errors_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, errors_.getRaw(i));
      }
      for (int i = 0; i < warnings_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, warnings_.getRaw(i));
      }
      for (int i = 0; i < hostnames_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, hostnames_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < planes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, planes_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < errors_.size(); i++) {
          dataSize += computeStringSizeNoTag(errors_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getErrorsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < warnings_.size(); i++) {
          dataSize += computeStringSizeNoTag(warnings_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getWarningsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < hostnames_.size(); i++) {
          dataSize += computeStringSizeNoTag(hostnames_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getHostnamesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.tensorflow.proto.profiler.Xplane.XSpace)) {
        return super.equals(obj);
      }
      org.tensorflow.proto.profiler.Xplane.XSpace other = (org.tensorflow.proto.profiler.Xplane.XSpace) obj;

      if (!getPlanesList()
          .equals(other.getPlanesList())) return false;
      if (!getErrorsList()
          .equals(other.getErrorsList())) return false;
      if (!getWarningsList()
          .equals(other.getWarningsList())) return false;
      if (!getHostnamesList()
          .equals(other.getHostnamesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getPlanesCount() > 0) {
        hash = (37 * hash) + PLANES_FIELD_NUMBER;
        hash = (53 * hash) + getPlanesList().hashCode();
      }
      if (getErrorsCount() > 0) {
        hash = (37 * hash) + ERRORS_FIELD_NUMBER;
        hash = (53 * hash) + getErrorsList().hashCode();
      }
      if (getWarningsCount() > 0) {
        hash = (37 * hash) + WARNINGS_FIELD_NUMBER;
        hash = (53 * hash) + getWarningsList().hashCode();
      }
      if (getHostnamesCount() > 0) {
        hash = (37 * hash) + HOSTNAMES_FIELD_NUMBER;
        hash = (53 * hash) + getHostnamesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.tensorflow.proto.profiler.Xplane.XSpace parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XSpace parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.tensorflow.proto.profiler.Xplane.XSpace prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A container of parallel XPlanes, generated by one or more profiling sources.
     * Next ID: 5
     * </pre>
     *
     * Protobuf type {@code tensorflow.profiler.XSpace}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.profiler.XSpace)
        org.tensorflow.proto.profiler.Xplane.XSpaceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XSpace_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XSpace_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.tensorflow.proto.profiler.Xplane.XSpace.class, org.tensorflow.proto.profiler.Xplane.XSpace.Builder.class);
      }

      // Construct using org.tensorflow.proto.profiler.Xplane.XSpace.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (planesBuilder_ == null) {
          planes_ = java.util.Collections.emptyList();
        } else {
          planes_ = null;
          planesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        errors_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        warnings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        hostnames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XSpace_descriptor;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XSpace getDefaultInstanceForType() {
        return org.tensorflow.proto.profiler.Xplane.XSpace.getDefaultInstance();
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XSpace build() {
        org.tensorflow.proto.profiler.Xplane.XSpace result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XSpace buildPartial() {
        org.tensorflow.proto.profiler.Xplane.XSpace result = new org.tensorflow.proto.profiler.Xplane.XSpace(this);
        int from_bitField0_ = bitField0_;
        if (planesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            planes_ = java.util.Collections.unmodifiableList(planes_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.planes_ = planes_;
        } else {
          result.planes_ = planesBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          errors_ = errors_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.errors_ = errors_;
        if (((bitField0_ & 0x00000004) != 0)) {
          warnings_ = warnings_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.warnings_ = warnings_;
        if (((bitField0_ & 0x00000008) != 0)) {
          hostnames_ = hostnames_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.hostnames_ = hostnames_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.tensorflow.proto.profiler.Xplane.XSpace) {
          return mergeFrom((org.tensorflow.proto.profiler.Xplane.XSpace)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.tensorflow.proto.profiler.Xplane.XSpace other) {
        if (other == org.tensorflow.proto.profiler.Xplane.XSpace.getDefaultInstance()) return this;
        if (planesBuilder_ == null) {
          if (!other.planes_.isEmpty()) {
            if (planes_.isEmpty()) {
              planes_ = other.planes_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePlanesIsMutable();
              planes_.addAll(other.planes_);
            }
            onChanged();
          }
        } else {
          if (!other.planes_.isEmpty()) {
            if (planesBuilder_.isEmpty()) {
              planesBuilder_.dispose();
              planesBuilder_ = null;
              planes_ = other.planes_;
              bitField0_ = (bitField0_ & ~0x00000001);
              planesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPlanesFieldBuilder() : null;
            } else {
              planesBuilder_.addAllMessages(other.planes_);
            }
          }
        }
        if (!other.errors_.isEmpty()) {
          if (errors_.isEmpty()) {
            errors_ = other.errors_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureErrorsIsMutable();
            errors_.addAll(other.errors_);
          }
          onChanged();
        }
        if (!other.warnings_.isEmpty()) {
          if (warnings_.isEmpty()) {
            warnings_ = other.warnings_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureWarningsIsMutable();
            warnings_.addAll(other.warnings_);
          }
          onChanged();
        }
        if (!other.hostnames_.isEmpty()) {
          if (hostnames_.isEmpty()) {
            hostnames_ = other.hostnames_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureHostnamesIsMutable();
            hostnames_.addAll(other.hostnames_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.tensorflow.proto.profiler.Xplane.XPlane m =
                    input.readMessage(
                        org.tensorflow.proto.profiler.Xplane.XPlane.parser(),
                        extensionRegistry);
                if (planesBuilder_ == null) {
                  ensurePlanesIsMutable();
                  planes_.add(m);
                } else {
                  planesBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureErrorsIsMutable();
                errors_.add(s);
                break;
              } // case 18
              case 26: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureWarningsIsMutable();
                warnings_.add(s);
                break;
              } // case 26
              case 34: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureHostnamesIsMutable();
                hostnames_.add(s);
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.tensorflow.proto.profiler.Xplane.XPlane> planes_ =
        java.util.Collections.emptyList();
      private void ensurePlanesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          planes_ = new java.util.ArrayList<org.tensorflow.proto.profiler.Xplane.XPlane>(planes_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XPlane, org.tensorflow.proto.profiler.Xplane.XPlane.Builder, org.tensorflow.proto.profiler.Xplane.XPlaneOrBuilder> planesBuilder_;

      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XPlane> getPlanesList() {
        if (planesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(planes_);
        } else {
          return planesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public int getPlanesCount() {
        if (planesBuilder_ == null) {
          return planes_.size();
        } else {
          return planesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XPlane getPlanes(int index) {
        if (planesBuilder_ == null) {
          return planes_.get(index);
        } else {
          return planesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public Builder setPlanes(
          int index, org.tensorflow.proto.profiler.Xplane.XPlane value) {
        if (planesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlanesIsMutable();
          planes_.set(index, value);
          onChanged();
        } else {
          planesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public Builder setPlanes(
          int index, org.tensorflow.proto.profiler.Xplane.XPlane.Builder builderForValue) {
        if (planesBuilder_ == null) {
          ensurePlanesIsMutable();
          planes_.set(index, builderForValue.build());
          onChanged();
        } else {
          planesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public Builder addPlanes(org.tensorflow.proto.profiler.Xplane.XPlane value) {
        if (planesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlanesIsMutable();
          planes_.add(value);
          onChanged();
        } else {
          planesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public Builder addPlanes(
          int index, org.tensorflow.proto.profiler.Xplane.XPlane value) {
        if (planesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlanesIsMutable();
          planes_.add(index, value);
          onChanged();
        } else {
          planesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public Builder addPlanes(
          org.tensorflow.proto.profiler.Xplane.XPlane.Builder builderForValue) {
        if (planesBuilder_ == null) {
          ensurePlanesIsMutable();
          planes_.add(builderForValue.build());
          onChanged();
        } else {
          planesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public Builder addPlanes(
          int index, org.tensorflow.proto.profiler.Xplane.XPlane.Builder builderForValue) {
        if (planesBuilder_ == null) {
          ensurePlanesIsMutable();
          planes_.add(index, builderForValue.build());
          onChanged();
        } else {
          planesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public Builder addAllPlanes(
          java.lang.Iterable<? extends org.tensorflow.proto.profiler.Xplane.XPlane> values) {
        if (planesBuilder_ == null) {
          ensurePlanesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, planes_);
          onChanged();
        } else {
          planesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public Builder clearPlanes() {
        if (planesBuilder_ == null) {
          planes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          planesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public Builder removePlanes(int index) {
        if (planesBuilder_ == null) {
          ensurePlanesIsMutable();
          planes_.remove(index);
          onChanged();
        } else {
          planesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XPlane.Builder getPlanesBuilder(
          int index) {
        return getPlanesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XPlaneOrBuilder getPlanesOrBuilder(
          int index) {
        if (planesBuilder_ == null) {
          return planes_.get(index);  } else {
          return planesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XPlaneOrBuilder> 
           getPlanesOrBuilderList() {
        if (planesBuilder_ != null) {
          return planesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(planes_);
        }
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XPlane.Builder addPlanesBuilder() {
        return getPlanesFieldBuilder().addBuilder(
            org.tensorflow.proto.profiler.Xplane.XPlane.getDefaultInstance());
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XPlane.Builder addPlanesBuilder(
          int index) {
        return getPlanesFieldBuilder().addBuilder(
            index, org.tensorflow.proto.profiler.Xplane.XPlane.getDefaultInstance());
      }
      /**
       * <code>repeated .tensorflow.profiler.XPlane planes = 1;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XPlane.Builder> 
           getPlanesBuilderList() {
        return getPlanesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XPlane, org.tensorflow.proto.profiler.Xplane.XPlane.Builder, org.tensorflow.proto.profiler.Xplane.XPlaneOrBuilder> 
          getPlanesFieldBuilder() {
        if (planesBuilder_ == null) {
          planesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.tensorflow.proto.profiler.Xplane.XPlane, org.tensorflow.proto.profiler.Xplane.XPlane.Builder, org.tensorflow.proto.profiler.Xplane.XPlaneOrBuilder>(
                  planes_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          planes_ = null;
        }
        return planesBuilder_;
      }

      private com.google.protobuf.LazyStringList errors_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureErrorsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          errors_ = new com.google.protobuf.LazyStringArrayList(errors_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Errors (if any) in the generation of planes.
       * </pre>
       *
       * <code>repeated string errors = 2;</code>
       * @return A list containing the errors.
       */
      public com.google.protobuf.ProtocolStringList
          getErrorsList() {
        return errors_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Errors (if any) in the generation of planes.
       * </pre>
       *
       * <code>repeated string errors = 2;</code>
       * @return The count of errors.
       */
      public int getErrorsCount() {
        return errors_.size();
      }
      /**
       * <pre>
       * Errors (if any) in the generation of planes.
       * </pre>
       *
       * <code>repeated string errors = 2;</code>
       * @param index The index of the element to return.
       * @return The errors at the given index.
       */
      public java.lang.String getErrors(int index) {
        return errors_.get(index);
      }
      /**
       * <pre>
       * Errors (if any) in the generation of planes.
       * </pre>
       *
       * <code>repeated string errors = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the errors at the given index.
       */
      public com.google.protobuf.ByteString
          getErrorsBytes(int index) {
        return errors_.getByteString(index);
      }
      /**
       * <pre>
       * Errors (if any) in the generation of planes.
       * </pre>
       *
       * <code>repeated string errors = 2;</code>
       * @param index The index to set the value at.
       * @param value The errors to set.
       * @return This builder for chaining.
       */
      public Builder setErrors(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureErrorsIsMutable();
        errors_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Errors (if any) in the generation of planes.
       * </pre>
       *
       * <code>repeated string errors = 2;</code>
       * @param value The errors to add.
       * @return This builder for chaining.
       */
      public Builder addErrors(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureErrorsIsMutable();
        errors_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Errors (if any) in the generation of planes.
       * </pre>
       *
       * <code>repeated string errors = 2;</code>
       * @param values The errors to add.
       * @return This builder for chaining.
       */
      public Builder addAllErrors(
          java.lang.Iterable<java.lang.String> values) {
        ensureErrorsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, errors_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Errors (if any) in the generation of planes.
       * </pre>
       *
       * <code>repeated string errors = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrors() {
        errors_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Errors (if any) in the generation of planes.
       * </pre>
       *
       * <code>repeated string errors = 2;</code>
       * @param value The bytes of the errors to add.
       * @return This builder for chaining.
       */
      public Builder addErrorsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureErrorsIsMutable();
        errors_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList warnings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureWarningsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          warnings_ = new com.google.protobuf.LazyStringArrayList(warnings_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * Warnings (if any) in the generation of planes;
       * </pre>
       *
       * <code>repeated string warnings = 3;</code>
       * @return A list containing the warnings.
       */
      public com.google.protobuf.ProtocolStringList
          getWarningsList() {
        return warnings_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Warnings (if any) in the generation of planes;
       * </pre>
       *
       * <code>repeated string warnings = 3;</code>
       * @return The count of warnings.
       */
      public int getWarningsCount() {
        return warnings_.size();
      }
      /**
       * <pre>
       * Warnings (if any) in the generation of planes;
       * </pre>
       *
       * <code>repeated string warnings = 3;</code>
       * @param index The index of the element to return.
       * @return The warnings at the given index.
       */
      public java.lang.String getWarnings(int index) {
        return warnings_.get(index);
      }
      /**
       * <pre>
       * Warnings (if any) in the generation of planes;
       * </pre>
       *
       * <code>repeated string warnings = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the warnings at the given index.
       */
      public com.google.protobuf.ByteString
          getWarningsBytes(int index) {
        return warnings_.getByteString(index);
      }
      /**
       * <pre>
       * Warnings (if any) in the generation of planes;
       * </pre>
       *
       * <code>repeated string warnings = 3;</code>
       * @param index The index to set the value at.
       * @param value The warnings to set.
       * @return This builder for chaining.
       */
      public Builder setWarnings(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureWarningsIsMutable();
        warnings_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Warnings (if any) in the generation of planes;
       * </pre>
       *
       * <code>repeated string warnings = 3;</code>
       * @param value The warnings to add.
       * @return This builder for chaining.
       */
      public Builder addWarnings(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureWarningsIsMutable();
        warnings_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Warnings (if any) in the generation of planes;
       * </pre>
       *
       * <code>repeated string warnings = 3;</code>
       * @param values The warnings to add.
       * @return This builder for chaining.
       */
      public Builder addAllWarnings(
          java.lang.Iterable<java.lang.String> values) {
        ensureWarningsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, warnings_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Warnings (if any) in the generation of planes;
       * </pre>
       *
       * <code>repeated string warnings = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearWarnings() {
        warnings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Warnings (if any) in the generation of planes;
       * </pre>
       *
       * <code>repeated string warnings = 3;</code>
       * @param value The bytes of the warnings to add.
       * @return This builder for chaining.
       */
      public Builder addWarningsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureWarningsIsMutable();
        warnings_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList hostnames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureHostnamesIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          hostnames_ = new com.google.protobuf.LazyStringArrayList(hostnames_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * List of hostnames that XPlanes are generated from.
       * </pre>
       *
       * <code>repeated string hostnames = 4;</code>
       * @return A list containing the hostnames.
       */
      public com.google.protobuf.ProtocolStringList
          getHostnamesList() {
        return hostnames_.getUnmodifiableView();
      }
      /**
       * <pre>
       * List of hostnames that XPlanes are generated from.
       * </pre>
       *
       * <code>repeated string hostnames = 4;</code>
       * @return The count of hostnames.
       */
      public int getHostnamesCount() {
        return hostnames_.size();
      }
      /**
       * <pre>
       * List of hostnames that XPlanes are generated from.
       * </pre>
       *
       * <code>repeated string hostnames = 4;</code>
       * @param index The index of the element to return.
       * @return The hostnames at the given index.
       */
      public java.lang.String getHostnames(int index) {
        return hostnames_.get(index);
      }
      /**
       * <pre>
       * List of hostnames that XPlanes are generated from.
       * </pre>
       *
       * <code>repeated string hostnames = 4;</code>
       * @param index The index of the value to return.
       * @return The bytes of the hostnames at the given index.
       */
      public com.google.protobuf.ByteString
          getHostnamesBytes(int index) {
        return hostnames_.getByteString(index);
      }
      /**
       * <pre>
       * List of hostnames that XPlanes are generated from.
       * </pre>
       *
       * <code>repeated string hostnames = 4;</code>
       * @param index The index to set the value at.
       * @param value The hostnames to set.
       * @return This builder for chaining.
       */
      public Builder setHostnames(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureHostnamesIsMutable();
        hostnames_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of hostnames that XPlanes are generated from.
       * </pre>
       *
       * <code>repeated string hostnames = 4;</code>
       * @param value The hostnames to add.
       * @return This builder for chaining.
       */
      public Builder addHostnames(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureHostnamesIsMutable();
        hostnames_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of hostnames that XPlanes are generated from.
       * </pre>
       *
       * <code>repeated string hostnames = 4;</code>
       * @param values The hostnames to add.
       * @return This builder for chaining.
       */
      public Builder addAllHostnames(
          java.lang.Iterable<java.lang.String> values) {
        ensureHostnamesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, hostnames_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of hostnames that XPlanes are generated from.
       * </pre>
       *
       * <code>repeated string hostnames = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearHostnames() {
        hostnames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of hostnames that XPlanes are generated from.
       * </pre>
       *
       * <code>repeated string hostnames = 4;</code>
       * @param value The bytes of the hostnames to add.
       * @return This builder for chaining.
       */
      public Builder addHostnamesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureHostnamesIsMutable();
        hostnames_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.profiler.XSpace)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.profiler.XSpace)
    private static final org.tensorflow.proto.profiler.Xplane.XSpace DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.tensorflow.proto.profiler.Xplane.XSpace();
    }

    public static org.tensorflow.proto.profiler.Xplane.XSpace getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<XSpace>
        PARSER = new com.google.protobuf.AbstractParser<XSpace>() {
      @java.lang.Override
      public XSpace parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<XSpace> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XSpace> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XSpace getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface XPlaneOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.profiler.XPlane)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 id = 1;</code>
     * @return The id.
     */
    long getId();

    /**
     * <pre>
     * Name of this XPlane.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of this XPlane.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Parallel timelines grouped in this plane. XLines with the same id
     * are effectively the same timeline.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
     */
    java.util.List<org.tensorflow.proto.profiler.Xplane.XLine> 
        getLinesList();
    /**
     * <pre>
     * Parallel timelines grouped in this plane. XLines with the same id
     * are effectively the same timeline.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XLine getLines(int index);
    /**
     * <pre>
     * Parallel timelines grouped in this plane. XLines with the same id
     * are effectively the same timeline.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
     */
    int getLinesCount();
    /**
     * <pre>
     * Parallel timelines grouped in this plane. XLines with the same id
     * are effectively the same timeline.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
     */
    java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XLineOrBuilder> 
        getLinesOrBuilderList();
    /**
     * <pre>
     * Parallel timelines grouped in this plane. XLines with the same id
     * are effectively the same timeline.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XLineOrBuilder getLinesOrBuilder(
        int index);

    /**
     * <pre>
     * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
     * should be used for events that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
     */
    int getEventMetadataCount();
    /**
     * <pre>
     * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
     * should be used for events that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
     */
    boolean containsEventMetadata(
        long key);
    /**
     * Use {@link #getEventMetadataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata>
    getEventMetadata();
    /**
     * <pre>
     * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
     * should be used for events that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
     */
    java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata>
    getEventMetadataMap();
    /**
     * <pre>
     * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
     * should be used for events that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
     */

    /* nullable */
org.tensorflow.proto.profiler.Xplane.XEventMetadata getEventMetadataOrDefault(
        long key,
        /* nullable */
org.tensorflow.proto.profiler.Xplane.XEventMetadata defaultValue);
    /**
     * <pre>
     * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
     * should be used for events that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
     */

    org.tensorflow.proto.profiler.Xplane.XEventMetadata getEventMetadataOrThrow(
        long key);

    /**
     * <pre>
     * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
     * should be used for stats that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
     */
    int getStatMetadataCount();
    /**
     * <pre>
     * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
     * should be used for stats that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
     */
    boolean containsStatMetadata(
        long key);
    /**
     * Use {@link #getStatMetadataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata>
    getStatMetadata();
    /**
     * <pre>
     * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
     * should be used for stats that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
     */
    java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata>
    getStatMetadataMap();
    /**
     * <pre>
     * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
     * should be used for stats that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
     */

    /* nullable */
org.tensorflow.proto.profiler.Xplane.XStatMetadata getStatMetadataOrDefault(
        long key,
        /* nullable */
org.tensorflow.proto.profiler.Xplane.XStatMetadata defaultValue);
    /**
     * <pre>
     * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
     * should be used for stats that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
     */

    org.tensorflow.proto.profiler.Xplane.XStatMetadata getStatMetadataOrThrow(
        long key);

    /**
     * <pre>
     * XStats associated with this plane, e.g. device capabilities.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
     */
    java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> 
        getStatsList();
    /**
     * <pre>
     * XStats associated with this plane, e.g. device capabilities.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XStat getStats(int index);
    /**
     * <pre>
     * XStats associated with this plane, e.g. device capabilities.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
     */
    int getStatsCount();
    /**
     * <pre>
     * XStats associated with this plane, e.g. device capabilities.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
     */
    java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
        getStatsOrBuilderList();
    /**
     * <pre>
     * XStats associated with this plane, e.g. device capabilities.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XStatOrBuilder getStatsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * An XPlane is a container of parallel timelines (XLines), generated by a
   * profiling source or by post-processing one or more XPlanes.
   * Next ID: 7
   * </pre>
   *
   * Protobuf type {@code tensorflow.profiler.XPlane}
   */
  public static final class XPlane extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.profiler.XPlane)
      XPlaneOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XPlane.newBuilder() to construct.
    private XPlane(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XPlane() {
      name_ = "";
      lines_ = java.util.Collections.emptyList();
      stats_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new XPlane();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XPlane_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetEventMetadata();
        case 5:
          return internalGetStatMetadata();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XPlane_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.proto.profiler.Xplane.XPlane.class, org.tensorflow.proto.profiler.Xplane.XPlane.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <code>int64 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name of this XPlane.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of this XPlane.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LINES_FIELD_NUMBER = 3;
    private java.util.List<org.tensorflow.proto.profiler.Xplane.XLine> lines_;
    /**
     * <pre>
     * Parallel timelines grouped in this plane. XLines with the same id
     * are effectively the same timeline.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.tensorflow.proto.profiler.Xplane.XLine> getLinesList() {
      return lines_;
    }
    /**
     * <pre>
     * Parallel timelines grouped in this plane. XLines with the same id
     * are effectively the same timeline.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XLineOrBuilder> 
        getLinesOrBuilderList() {
      return lines_;
    }
    /**
     * <pre>
     * Parallel timelines grouped in this plane. XLines with the same id
     * are effectively the same timeline.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
     */
    @java.lang.Override
    public int getLinesCount() {
      return lines_.size();
    }
    /**
     * <pre>
     * Parallel timelines grouped in this plane. XLines with the same id
     * are effectively the same timeline.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XLine getLines(int index) {
      return lines_.get(index);
    }
    /**
     * <pre>
     * Parallel timelines grouped in this plane. XLines with the same id
     * are effectively the same timeline.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XLineOrBuilder getLinesOrBuilder(
        int index) {
      return lines_.get(index);
    }

    public static final int EVENT_METADATA_FIELD_NUMBER = 4;
    private static final class EventMetadataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata>newDefaultInstance(
                  org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XPlane_EventMetadataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.tensorflow.proto.profiler.Xplane.XEventMetadata.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> eventMetadata_;
    private com.google.protobuf.MapField<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata>
    internalGetEventMetadata() {
      if (eventMetadata_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            EventMetadataDefaultEntryHolder.defaultEntry);
      }
      return eventMetadata_;
    }

    public int getEventMetadataCount() {
      return internalGetEventMetadata().getMap().size();
    }
    /**
     * <pre>
     * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
     * should be used for events that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
     */

    @java.lang.Override
    public boolean containsEventMetadata(
        long key) {
      
      return internalGetEventMetadata().getMap().containsKey(key);
    }
    /**
     * Use {@link #getEventMetadataMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> getEventMetadata() {
      return getEventMetadataMap();
    }
    /**
     * <pre>
     * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
     * should be used for events that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> getEventMetadataMap() {
      return internalGetEventMetadata().getMap();
    }
    /**
     * <pre>
     * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
     * should be used for events that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
     */
    @java.lang.Override

    public org.tensorflow.proto.profiler.Xplane.XEventMetadata getEventMetadataOrDefault(
        long key,
        org.tensorflow.proto.profiler.Xplane.XEventMetadata defaultValue) {
      
      java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> map =
          internalGetEventMetadata().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
     * should be used for events that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
     */
    @java.lang.Override

    public org.tensorflow.proto.profiler.Xplane.XEventMetadata getEventMetadataOrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> map =
          internalGetEventMetadata().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int STAT_METADATA_FIELD_NUMBER = 5;
    private static final class StatMetadataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata>newDefaultInstance(
                  org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XPlane_StatMetadataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.tensorflow.proto.profiler.Xplane.XStatMetadata.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> statMetadata_;
    private com.google.protobuf.MapField<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata>
    internalGetStatMetadata() {
      if (statMetadata_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StatMetadataDefaultEntryHolder.defaultEntry);
      }
      return statMetadata_;
    }

    public int getStatMetadataCount() {
      return internalGetStatMetadata().getMap().size();
    }
    /**
     * <pre>
     * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
     * should be used for stats that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
     */

    @java.lang.Override
    public boolean containsStatMetadata(
        long key) {
      
      return internalGetStatMetadata().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStatMetadataMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> getStatMetadata() {
      return getStatMetadataMap();
    }
    /**
     * <pre>
     * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
     * should be used for stats that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> getStatMetadataMap() {
      return internalGetStatMetadata().getMap();
    }
    /**
     * <pre>
     * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
     * should be used for stats that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
     */
    @java.lang.Override

    public org.tensorflow.proto.profiler.Xplane.XStatMetadata getStatMetadataOrDefault(
        long key,
        org.tensorflow.proto.profiler.Xplane.XStatMetadata defaultValue) {
      
      java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> map =
          internalGetStatMetadata().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
     * should be used for stats that share the same ID over the whole XPlane.
     * </pre>
     *
     * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
     */
    @java.lang.Override

    public org.tensorflow.proto.profiler.Xplane.XStatMetadata getStatMetadataOrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> map =
          internalGetStatMetadata().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int STATS_FIELD_NUMBER = 6;
    private java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> stats_;
    /**
     * <pre>
     * XStats associated with this plane, e.g. device capabilities.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> getStatsList() {
      return stats_;
    }
    /**
     * <pre>
     * XStats associated with this plane, e.g. device capabilities.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
        getStatsOrBuilderList() {
      return stats_;
    }
    /**
     * <pre>
     * XStats associated with this plane, e.g. device capabilities.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
     */
    @java.lang.Override
    public int getStatsCount() {
      return stats_.size();
    }
    /**
     * <pre>
     * XStats associated with this plane, e.g. device capabilities.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XStat getStats(int index) {
      return stats_.get(index);
    }
    /**
     * <pre>
     * XStats associated with this plane, e.g. device capabilities.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XStatOrBuilder getStatsOrBuilder(
        int index) {
      return stats_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0L) {
        output.writeInt64(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      for (int i = 0; i < lines_.size(); i++) {
        output.writeMessage(3, lines_.get(i));
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeLongMapTo(
          output,
          internalGetEventMetadata(),
          EventMetadataDefaultEntryHolder.defaultEntry,
          4);
      com.google.protobuf.GeneratedMessageV3
        .serializeLongMapTo(
          output,
          internalGetStatMetadata(),
          StatMetadataDefaultEntryHolder.defaultEntry,
          5);
      for (int i = 0; i < stats_.size(); i++) {
        output.writeMessage(6, stats_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      for (int i = 0; i < lines_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, lines_.get(i));
      }
      for (java.util.Map.Entry<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> entry
           : internalGetEventMetadata().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata>
        eventMetadata__ = EventMetadataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, eventMetadata__);
      }
      for (java.util.Map.Entry<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> entry
           : internalGetStatMetadata().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata>
        statMetadata__ = StatMetadataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, statMetadata__);
      }
      for (int i = 0; i < stats_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, stats_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.tensorflow.proto.profiler.Xplane.XPlane)) {
        return super.equals(obj);
      }
      org.tensorflow.proto.profiler.Xplane.XPlane other = (org.tensorflow.proto.profiler.Xplane.XPlane) obj;

      if (getId()
          != other.getId()) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getLinesList()
          .equals(other.getLinesList())) return false;
      if (!internalGetEventMetadata().equals(
          other.internalGetEventMetadata())) return false;
      if (!internalGetStatMetadata().equals(
          other.internalGetStatMetadata())) return false;
      if (!getStatsList()
          .equals(other.getStatsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (getLinesCount() > 0) {
        hash = (37 * hash) + LINES_FIELD_NUMBER;
        hash = (53 * hash) + getLinesList().hashCode();
      }
      if (!internalGetEventMetadata().getMap().isEmpty()) {
        hash = (37 * hash) + EVENT_METADATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetEventMetadata().hashCode();
      }
      if (!internalGetStatMetadata().getMap().isEmpty()) {
        hash = (37 * hash) + STAT_METADATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetStatMetadata().hashCode();
      }
      if (getStatsCount() > 0) {
        hash = (37 * hash) + STATS_FIELD_NUMBER;
        hash = (53 * hash) + getStatsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.tensorflow.proto.profiler.Xplane.XPlane parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XPlane parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.tensorflow.proto.profiler.Xplane.XPlane prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An XPlane is a container of parallel timelines (XLines), generated by a
     * profiling source or by post-processing one or more XPlanes.
     * Next ID: 7
     * </pre>
     *
     * Protobuf type {@code tensorflow.profiler.XPlane}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.profiler.XPlane)
        org.tensorflow.proto.profiler.Xplane.XPlaneOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XPlane_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetEventMetadata();
          case 5:
            return internalGetStatMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetMutableEventMetadata();
          case 5:
            return internalGetMutableStatMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XPlane_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.tensorflow.proto.profiler.Xplane.XPlane.class, org.tensorflow.proto.profiler.Xplane.XPlane.Builder.class);
      }

      // Construct using org.tensorflow.proto.profiler.Xplane.XPlane.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = 0L;

        name_ = "";

        if (linesBuilder_ == null) {
          lines_ = java.util.Collections.emptyList();
        } else {
          lines_ = null;
          linesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        internalGetMutableEventMetadata().clear();
        internalGetMutableStatMetadata().clear();
        if (statsBuilder_ == null) {
          stats_ = java.util.Collections.emptyList();
        } else {
          stats_ = null;
          statsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XPlane_descriptor;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XPlane getDefaultInstanceForType() {
        return org.tensorflow.proto.profiler.Xplane.XPlane.getDefaultInstance();
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XPlane build() {
        org.tensorflow.proto.profiler.Xplane.XPlane result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XPlane buildPartial() {
        org.tensorflow.proto.profiler.Xplane.XPlane result = new org.tensorflow.proto.profiler.Xplane.XPlane(this);
        int from_bitField0_ = bitField0_;
        result.id_ = id_;
        result.name_ = name_;
        if (linesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            lines_ = java.util.Collections.unmodifiableList(lines_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.lines_ = lines_;
        } else {
          result.lines_ = linesBuilder_.build();
        }
        result.eventMetadata_ = internalGetEventMetadata();
        result.eventMetadata_.makeImmutable();
        result.statMetadata_ = internalGetStatMetadata();
        result.statMetadata_.makeImmutable();
        if (statsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            stats_ = java.util.Collections.unmodifiableList(stats_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.stats_ = stats_;
        } else {
          result.stats_ = statsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.tensorflow.proto.profiler.Xplane.XPlane) {
          return mergeFrom((org.tensorflow.proto.profiler.Xplane.XPlane)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.tensorflow.proto.profiler.Xplane.XPlane other) {
        if (other == org.tensorflow.proto.profiler.Xplane.XPlane.getDefaultInstance()) return this;
        if (other.getId() != 0L) {
          setId(other.getId());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (linesBuilder_ == null) {
          if (!other.lines_.isEmpty()) {
            if (lines_.isEmpty()) {
              lines_ = other.lines_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLinesIsMutable();
              lines_.addAll(other.lines_);
            }
            onChanged();
          }
        } else {
          if (!other.lines_.isEmpty()) {
            if (linesBuilder_.isEmpty()) {
              linesBuilder_.dispose();
              linesBuilder_ = null;
              lines_ = other.lines_;
              bitField0_ = (bitField0_ & ~0x00000001);
              linesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLinesFieldBuilder() : null;
            } else {
              linesBuilder_.addAllMessages(other.lines_);
            }
          }
        }
        internalGetMutableEventMetadata().mergeFrom(
            other.internalGetEventMetadata());
        internalGetMutableStatMetadata().mergeFrom(
            other.internalGetStatMetadata());
        if (statsBuilder_ == null) {
          if (!other.stats_.isEmpty()) {
            if (stats_.isEmpty()) {
              stats_ = other.stats_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureStatsIsMutable();
              stats_.addAll(other.stats_);
            }
            onChanged();
          }
        } else {
          if (!other.stats_.isEmpty()) {
            if (statsBuilder_.isEmpty()) {
              statsBuilder_.dispose();
              statsBuilder_ = null;
              stats_ = other.stats_;
              bitField0_ = (bitField0_ & ~0x00000008);
              statsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getStatsFieldBuilder() : null;
            } else {
              statsBuilder_.addAllMessages(other.stats_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                id_ = input.readInt64();

                break;
              } // case 8
              case 18: {
                name_ = input.readStringRequireUtf8();

                break;
              } // case 18
              case 26: {
                org.tensorflow.proto.profiler.Xplane.XLine m =
                    input.readMessage(
                        org.tensorflow.proto.profiler.Xplane.XLine.parser(),
                        extensionRegistry);
                if (linesBuilder_ == null) {
                  ensureLinesIsMutable();
                  lines_.add(m);
                } else {
                  linesBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                com.google.protobuf.MapEntry<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata>
                eventMetadata__ = input.readMessage(
                    EventMetadataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableEventMetadata().getMutableMap().put(
                    eventMetadata__.getKey(), eventMetadata__.getValue());
                break;
              } // case 34
              case 42: {
                com.google.protobuf.MapEntry<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata>
                statMetadata__ = input.readMessage(
                    StatMetadataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableStatMetadata().getMutableMap().put(
                    statMetadata__.getKey(), statMetadata__.getValue());
                break;
              } // case 42
              case 50: {
                org.tensorflow.proto.profiler.Xplane.XStat m =
                    input.readMessage(
                        org.tensorflow.proto.profiler.Xplane.XStat.parser(),
                        extensionRegistry);
                if (statsBuilder_ == null) {
                  ensureStatsIsMutable();
                  stats_.add(m);
                } else {
                  statsBuilder_.addMessage(m);
                }
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long id_ ;
      /**
       * <code>int64 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <code>int64 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(long value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of this XPlane.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of this XPlane.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of this XPlane.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of this XPlane.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of this XPlane.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<org.tensorflow.proto.profiler.Xplane.XLine> lines_ =
        java.util.Collections.emptyList();
      private void ensureLinesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          lines_ = new java.util.ArrayList<org.tensorflow.proto.profiler.Xplane.XLine>(lines_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XLine, org.tensorflow.proto.profiler.Xplane.XLine.Builder, org.tensorflow.proto.profiler.Xplane.XLineOrBuilder> linesBuilder_;

      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XLine> getLinesList() {
        if (linesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(lines_);
        } else {
          return linesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public int getLinesCount() {
        if (linesBuilder_ == null) {
          return lines_.size();
        } else {
          return linesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XLine getLines(int index) {
        if (linesBuilder_ == null) {
          return lines_.get(index);
        } else {
          return linesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public Builder setLines(
          int index, org.tensorflow.proto.profiler.Xplane.XLine value) {
        if (linesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLinesIsMutable();
          lines_.set(index, value);
          onChanged();
        } else {
          linesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public Builder setLines(
          int index, org.tensorflow.proto.profiler.Xplane.XLine.Builder builderForValue) {
        if (linesBuilder_ == null) {
          ensureLinesIsMutable();
          lines_.set(index, builderForValue.build());
          onChanged();
        } else {
          linesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public Builder addLines(org.tensorflow.proto.profiler.Xplane.XLine value) {
        if (linesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLinesIsMutable();
          lines_.add(value);
          onChanged();
        } else {
          linesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public Builder addLines(
          int index, org.tensorflow.proto.profiler.Xplane.XLine value) {
        if (linesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLinesIsMutable();
          lines_.add(index, value);
          onChanged();
        } else {
          linesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public Builder addLines(
          org.tensorflow.proto.profiler.Xplane.XLine.Builder builderForValue) {
        if (linesBuilder_ == null) {
          ensureLinesIsMutable();
          lines_.add(builderForValue.build());
          onChanged();
        } else {
          linesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public Builder addLines(
          int index, org.tensorflow.proto.profiler.Xplane.XLine.Builder builderForValue) {
        if (linesBuilder_ == null) {
          ensureLinesIsMutable();
          lines_.add(index, builderForValue.build());
          onChanged();
        } else {
          linesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public Builder addAllLines(
          java.lang.Iterable<? extends org.tensorflow.proto.profiler.Xplane.XLine> values) {
        if (linesBuilder_ == null) {
          ensureLinesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, lines_);
          onChanged();
        } else {
          linesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public Builder clearLines() {
        if (linesBuilder_ == null) {
          lines_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          linesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public Builder removeLines(int index) {
        if (linesBuilder_ == null) {
          ensureLinesIsMutable();
          lines_.remove(index);
          onChanged();
        } else {
          linesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XLine.Builder getLinesBuilder(
          int index) {
        return getLinesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XLineOrBuilder getLinesOrBuilder(
          int index) {
        if (linesBuilder_ == null) {
          return lines_.get(index);  } else {
          return linesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XLineOrBuilder> 
           getLinesOrBuilderList() {
        if (linesBuilder_ != null) {
          return linesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(lines_);
        }
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XLine.Builder addLinesBuilder() {
        return getLinesFieldBuilder().addBuilder(
            org.tensorflow.proto.profiler.Xplane.XLine.getDefaultInstance());
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XLine.Builder addLinesBuilder(
          int index) {
        return getLinesFieldBuilder().addBuilder(
            index, org.tensorflow.proto.profiler.Xplane.XLine.getDefaultInstance());
      }
      /**
       * <pre>
       * Parallel timelines grouped in this plane. XLines with the same id
       * are effectively the same timeline.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XLine lines = 3;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XLine.Builder> 
           getLinesBuilderList() {
        return getLinesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XLine, org.tensorflow.proto.profiler.Xplane.XLine.Builder, org.tensorflow.proto.profiler.Xplane.XLineOrBuilder> 
          getLinesFieldBuilder() {
        if (linesBuilder_ == null) {
          linesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.tensorflow.proto.profiler.Xplane.XLine, org.tensorflow.proto.profiler.Xplane.XLine.Builder, org.tensorflow.proto.profiler.Xplane.XLineOrBuilder>(
                  lines_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          lines_ = null;
        }
        return linesBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> eventMetadata_;
      private com.google.protobuf.MapField<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata>
      internalGetEventMetadata() {
        if (eventMetadata_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              EventMetadataDefaultEntryHolder.defaultEntry);
        }
        return eventMetadata_;
      }
      private com.google.protobuf.MapField<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata>
      internalGetMutableEventMetadata() {
        onChanged();;
        if (eventMetadata_ == null) {
          eventMetadata_ = com.google.protobuf.MapField.newMapField(
              EventMetadataDefaultEntryHolder.defaultEntry);
        }
        if (!eventMetadata_.isMutable()) {
          eventMetadata_ = eventMetadata_.copy();
        }
        return eventMetadata_;
      }

      public int getEventMetadataCount() {
        return internalGetEventMetadata().getMap().size();
      }
      /**
       * <pre>
       * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
       * should be used for events that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
       */

      @java.lang.Override
      public boolean containsEventMetadata(
          long key) {
        
        return internalGetEventMetadata().getMap().containsKey(key);
      }
      /**
       * Use {@link #getEventMetadataMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> getEventMetadata() {
        return getEventMetadataMap();
      }
      /**
       * <pre>
       * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
       * should be used for events that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> getEventMetadataMap() {
        return internalGetEventMetadata().getMap();
      }
      /**
       * <pre>
       * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
       * should be used for events that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
       */
      @java.lang.Override

      public org.tensorflow.proto.profiler.Xplane.XEventMetadata getEventMetadataOrDefault(
          long key,
          org.tensorflow.proto.profiler.Xplane.XEventMetadata defaultValue) {
        
        java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> map =
            internalGetEventMetadata().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
       * should be used for events that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
       */
      @java.lang.Override

      public org.tensorflow.proto.profiler.Xplane.XEventMetadata getEventMetadataOrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> map =
            internalGetEventMetadata().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearEventMetadata() {
        internalGetMutableEventMetadata().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
       * should be used for events that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
       */

      public Builder removeEventMetadata(
          long key) {
        
        internalGetMutableEventMetadata().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata>
      getMutableEventMetadata() {
        return internalGetMutableEventMetadata().getMutableMap();
      }
      /**
       * <pre>
       * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
       * should be used for events that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
       */
      public Builder putEventMetadata(
          long key,
          org.tensorflow.proto.profiler.Xplane.XEventMetadata value) {
        
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableEventMetadata().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
       * should be used for events that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XEventMetadata&gt; event_metadata = 4;</code>
       */

      public Builder putAllEventMetadata(
          java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XEventMetadata> values) {
        internalGetMutableEventMetadata().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> statMetadata_;
      private com.google.protobuf.MapField<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata>
      internalGetStatMetadata() {
        if (statMetadata_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              StatMetadataDefaultEntryHolder.defaultEntry);
        }
        return statMetadata_;
      }
      private com.google.protobuf.MapField<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata>
      internalGetMutableStatMetadata() {
        onChanged();;
        if (statMetadata_ == null) {
          statMetadata_ = com.google.protobuf.MapField.newMapField(
              StatMetadataDefaultEntryHolder.defaultEntry);
        }
        if (!statMetadata_.isMutable()) {
          statMetadata_ = statMetadata_.copy();
        }
        return statMetadata_;
      }

      public int getStatMetadataCount() {
        return internalGetStatMetadata().getMap().size();
      }
      /**
       * <pre>
       * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
       * should be used for stats that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
       */

      @java.lang.Override
      public boolean containsStatMetadata(
          long key) {
        
        return internalGetStatMetadata().getMap().containsKey(key);
      }
      /**
       * Use {@link #getStatMetadataMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> getStatMetadata() {
        return getStatMetadataMap();
      }
      /**
       * <pre>
       * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
       * should be used for stats that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> getStatMetadataMap() {
        return internalGetStatMetadata().getMap();
      }
      /**
       * <pre>
       * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
       * should be used for stats that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
       */
      @java.lang.Override

      public org.tensorflow.proto.profiler.Xplane.XStatMetadata getStatMetadataOrDefault(
          long key,
          org.tensorflow.proto.profiler.Xplane.XStatMetadata defaultValue) {
        
        java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> map =
            internalGetStatMetadata().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
       * should be used for stats that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
       */
      @java.lang.Override

      public org.tensorflow.proto.profiler.Xplane.XStatMetadata getStatMetadataOrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> map =
            internalGetStatMetadata().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearStatMetadata() {
        internalGetMutableStatMetadata().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
       * should be used for stats that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
       */

      public Builder removeStatMetadata(
          long key) {
        
        internalGetMutableStatMetadata().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata>
      getMutableStatMetadata() {
        return internalGetMutableStatMetadata().getMutableMap();
      }
      /**
       * <pre>
       * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
       * should be used for stats that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
       */
      public Builder putStatMetadata(
          long key,
          org.tensorflow.proto.profiler.Xplane.XStatMetadata value) {
        
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableStatMetadata().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
       * should be used for stats that share the same ID over the whole XPlane.
       * </pre>
       *
       * <code>map&lt;int64, .tensorflow.profiler.XStatMetadata&gt; stat_metadata = 5;</code>
       */

      public Builder putAllStatMetadata(
          java.util.Map<java.lang.Long, org.tensorflow.proto.profiler.Xplane.XStatMetadata> values) {
        internalGetMutableStatMetadata().getMutableMap()
            .putAll(values);
        return this;
      }

      private java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> stats_ =
        java.util.Collections.emptyList();
      private void ensureStatsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          stats_ = new java.util.ArrayList<org.tensorflow.proto.profiler.Xplane.XStat>(stats_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XStat, org.tensorflow.proto.profiler.Xplane.XStat.Builder, org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> statsBuilder_;

      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> getStatsList() {
        if (statsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(stats_);
        } else {
          return statsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public int getStatsCount() {
        if (statsBuilder_ == null) {
          return stats_.size();
        } else {
          return statsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat getStats(int index) {
        if (statsBuilder_ == null) {
          return stats_.get(index);
        } else {
          return statsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public Builder setStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatsIsMutable();
          stats_.set(index, value);
          onChanged();
        } else {
          statsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public Builder setStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat.Builder builderForValue) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.set(index, builderForValue.build());
          onChanged();
        } else {
          statsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public Builder addStats(org.tensorflow.proto.profiler.Xplane.XStat value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatsIsMutable();
          stats_.add(value);
          onChanged();
        } else {
          statsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public Builder addStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatsIsMutable();
          stats_.add(index, value);
          onChanged();
        } else {
          statsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public Builder addStats(
          org.tensorflow.proto.profiler.Xplane.XStat.Builder builderForValue) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.add(builderForValue.build());
          onChanged();
        } else {
          statsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public Builder addStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat.Builder builderForValue) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.add(index, builderForValue.build());
          onChanged();
        } else {
          statsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public Builder addAllStats(
          java.lang.Iterable<? extends org.tensorflow.proto.profiler.Xplane.XStat> values) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, stats_);
          onChanged();
        } else {
          statsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public Builder clearStats() {
        if (statsBuilder_ == null) {
          stats_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          statsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public Builder removeStats(int index) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.remove(index);
          onChanged();
        } else {
          statsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat.Builder getStatsBuilder(
          int index) {
        return getStatsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStatOrBuilder getStatsOrBuilder(
          int index) {
        if (statsBuilder_ == null) {
          return stats_.get(index);  } else {
          return statsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
           getStatsOrBuilderList() {
        if (statsBuilder_ != null) {
          return statsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(stats_);
        }
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat.Builder addStatsBuilder() {
        return getStatsFieldBuilder().addBuilder(
            org.tensorflow.proto.profiler.Xplane.XStat.getDefaultInstance());
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat.Builder addStatsBuilder(
          int index) {
        return getStatsFieldBuilder().addBuilder(
            index, org.tensorflow.proto.profiler.Xplane.XStat.getDefaultInstance());
      }
      /**
       * <pre>
       * XStats associated with this plane, e.g. device capabilities.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 6;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XStat.Builder> 
           getStatsBuilderList() {
        return getStatsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XStat, org.tensorflow.proto.profiler.Xplane.XStat.Builder, org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
          getStatsFieldBuilder() {
        if (statsBuilder_ == null) {
          statsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.tensorflow.proto.profiler.Xplane.XStat, org.tensorflow.proto.profiler.Xplane.XStat.Builder, org.tensorflow.proto.profiler.Xplane.XStatOrBuilder>(
                  stats_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          stats_ = null;
        }
        return statsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.profiler.XPlane)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.profiler.XPlane)
    private static final org.tensorflow.proto.profiler.Xplane.XPlane DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.tensorflow.proto.profiler.Xplane.XPlane();
    }

    public static org.tensorflow.proto.profiler.Xplane.XPlane getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<XPlane>
        PARSER = new com.google.protobuf.AbstractParser<XPlane>() {
      @java.lang.Override
      public XPlane parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<XPlane> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XPlane> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XPlane getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface XLineOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.profiler.XLine)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Id of this line, can be repeated within an XPlane. All XLines with the
     * same id are effectively the same timeline.
     * </pre>
     *
     * <code>int64 id = 1;</code>
     * @return The id.
     */
    long getId();

    /**
     * <pre>
     * Display id of this line. Multiple lines with the same display_id are
     * grouped together in the same trace viewer row.
     * </pre>
     *
     * <code>int64 display_id = 10;</code>
     * @return The displayId.
     */
    long getDisplayId();

    /**
     * <pre>
     * Name of this XLine.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of this XLine.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Name of this XLine to display in trace viewer.
     * </pre>
     *
     * <code>string display_name = 11;</code>
     * @return The displayName.
     */
    java.lang.String getDisplayName();
    /**
     * <pre>
     * Name of this XLine to display in trace viewer.
     * </pre>
     *
     * <code>string display_name = 11;</code>
     * @return The bytes for displayName.
     */
    com.google.protobuf.ByteString
        getDisplayNameBytes();

    /**
     * <pre>
     * Start time of this line in nanoseconds since the UNIX epoch.
     * XEvent.offset_ps is relative to this timestamp.
     * </pre>
     *
     * <code>int64 timestamp_ns = 3;</code>
     * @return The timestampNs.
     */
    long getTimestampNs();

    /**
     * <pre>
     * Profiling duration for this line in picoseconds.
     * </pre>
     *
     * <code>int64 duration_ps = 9;</code>
     * @return The durationPs.
     */
    long getDurationPs();

    /**
     * <pre>
     * XEvents within the same XLine should not overlap in time, but they can be
     * nested.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
     */
    java.util.List<org.tensorflow.proto.profiler.Xplane.XEvent> 
        getEventsList();
    /**
     * <pre>
     * XEvents within the same XLine should not overlap in time, but they can be
     * nested.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XEvent getEvents(int index);
    /**
     * <pre>
     * XEvents within the same XLine should not overlap in time, but they can be
     * nested.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
     */
    int getEventsCount();
    /**
     * <pre>
     * XEvents within the same XLine should not overlap in time, but they can be
     * nested.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
     */
    java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XEventOrBuilder> 
        getEventsOrBuilderList();
    /**
     * <pre>
     * XEvents within the same XLine should not overlap in time, but they can be
     * nested.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XEventOrBuilder getEventsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * An XLine is a timeline of trace events (XEvents).
   * Next ID: 12
   * </pre>
   *
   * Protobuf type {@code tensorflow.profiler.XLine}
   */
  public static final class XLine extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.profiler.XLine)
      XLineOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XLine.newBuilder() to construct.
    private XLine(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XLine() {
      name_ = "";
      displayName_ = "";
      events_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new XLine();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XLine_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XLine_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.proto.profiler.Xplane.XLine.class, org.tensorflow.proto.profiler.Xplane.XLine.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <pre>
     * Id of this line, can be repeated within an XPlane. All XLines with the
     * same id are effectively the same timeline.
     * </pre>
     *
     * <code>int64 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }

    public static final int DISPLAY_ID_FIELD_NUMBER = 10;
    private long displayId_;
    /**
     * <pre>
     * Display id of this line. Multiple lines with the same display_id are
     * grouped together in the same trace viewer row.
     * </pre>
     *
     * <code>int64 display_id = 10;</code>
     * @return The displayId.
     */
    @java.lang.Override
    public long getDisplayId() {
      return displayId_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name of this XLine.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of this XLine.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DISPLAY_NAME_FIELD_NUMBER = 11;
    private volatile java.lang.Object displayName_;
    /**
     * <pre>
     * Name of this XLine to display in trace viewer.
     * </pre>
     *
     * <code>string display_name = 11;</code>
     * @return The displayName.
     */
    @java.lang.Override
    public java.lang.String getDisplayName() {
      java.lang.Object ref = displayName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        displayName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of this XLine to display in trace viewer.
     * </pre>
     *
     * <code>string display_name = 11;</code>
     * @return The bytes for displayName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      java.lang.Object ref = displayName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        displayName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TIMESTAMP_NS_FIELD_NUMBER = 3;
    private long timestampNs_;
    /**
     * <pre>
     * Start time of this line in nanoseconds since the UNIX epoch.
     * XEvent.offset_ps is relative to this timestamp.
     * </pre>
     *
     * <code>int64 timestamp_ns = 3;</code>
     * @return The timestampNs.
     */
    @java.lang.Override
    public long getTimestampNs() {
      return timestampNs_;
    }

    public static final int DURATION_PS_FIELD_NUMBER = 9;
    private long durationPs_;
    /**
     * <pre>
     * Profiling duration for this line in picoseconds.
     * </pre>
     *
     * <code>int64 duration_ps = 9;</code>
     * @return The durationPs.
     */
    @java.lang.Override
    public long getDurationPs() {
      return durationPs_;
    }

    public static final int EVENTS_FIELD_NUMBER = 4;
    private java.util.List<org.tensorflow.proto.profiler.Xplane.XEvent> events_;
    /**
     * <pre>
     * XEvents within the same XLine should not overlap in time, but they can be
     * nested.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.tensorflow.proto.profiler.Xplane.XEvent> getEventsList() {
      return events_;
    }
    /**
     * <pre>
     * XEvents within the same XLine should not overlap in time, but they can be
     * nested.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XEventOrBuilder> 
        getEventsOrBuilderList() {
      return events_;
    }
    /**
     * <pre>
     * XEvents within the same XLine should not overlap in time, but they can be
     * nested.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
     */
    @java.lang.Override
    public int getEventsCount() {
      return events_.size();
    }
    /**
     * <pre>
     * XEvents within the same XLine should not overlap in time, but they can be
     * nested.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XEvent getEvents(int index) {
      return events_.get(index);
    }
    /**
     * <pre>
     * XEvents within the same XLine should not overlap in time, but they can be
     * nested.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XEventOrBuilder getEventsOrBuilder(
        int index) {
      return events_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0L) {
        output.writeInt64(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (timestampNs_ != 0L) {
        output.writeInt64(3, timestampNs_);
      }
      for (int i = 0; i < events_.size(); i++) {
        output.writeMessage(4, events_.get(i));
      }
      if (durationPs_ != 0L) {
        output.writeInt64(9, durationPs_);
      }
      if (displayId_ != 0L) {
        output.writeInt64(10, displayId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(displayName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 11, displayName_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (timestampNs_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, timestampNs_);
      }
      for (int i = 0; i < events_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, events_.get(i));
      }
      if (durationPs_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, durationPs_);
      }
      if (displayId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, displayId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(displayName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, displayName_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.tensorflow.proto.profiler.Xplane.XLine)) {
        return super.equals(obj);
      }
      org.tensorflow.proto.profiler.Xplane.XLine other = (org.tensorflow.proto.profiler.Xplane.XLine) obj;

      if (getId()
          != other.getId()) return false;
      if (getDisplayId()
          != other.getDisplayId()) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getDisplayName()
          .equals(other.getDisplayName())) return false;
      if (getTimestampNs()
          != other.getTimestampNs()) return false;
      if (getDurationPs()
          != other.getDurationPs()) return false;
      if (!getEventsList()
          .equals(other.getEventsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
      hash = (37 * hash) + DISPLAY_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDisplayId());
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + DISPLAY_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getDisplayName().hashCode();
      hash = (37 * hash) + TIMESTAMP_NS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestampNs());
      hash = (37 * hash) + DURATION_PS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDurationPs());
      if (getEventsCount() > 0) {
        hash = (37 * hash) + EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + getEventsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.tensorflow.proto.profiler.Xplane.XLine parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XLine parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.tensorflow.proto.profiler.Xplane.XLine prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An XLine is a timeline of trace events (XEvents).
     * Next ID: 12
     * </pre>
     *
     * Protobuf type {@code tensorflow.profiler.XLine}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.profiler.XLine)
        org.tensorflow.proto.profiler.Xplane.XLineOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XLine_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XLine_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.tensorflow.proto.profiler.Xplane.XLine.class, org.tensorflow.proto.profiler.Xplane.XLine.Builder.class);
      }

      // Construct using org.tensorflow.proto.profiler.Xplane.XLine.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = 0L;

        displayId_ = 0L;

        name_ = "";

        displayName_ = "";

        timestampNs_ = 0L;

        durationPs_ = 0L;

        if (eventsBuilder_ == null) {
          events_ = java.util.Collections.emptyList();
        } else {
          events_ = null;
          eventsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XLine_descriptor;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XLine getDefaultInstanceForType() {
        return org.tensorflow.proto.profiler.Xplane.XLine.getDefaultInstance();
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XLine build() {
        org.tensorflow.proto.profiler.Xplane.XLine result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XLine buildPartial() {
        org.tensorflow.proto.profiler.Xplane.XLine result = new org.tensorflow.proto.profiler.Xplane.XLine(this);
        int from_bitField0_ = bitField0_;
        result.id_ = id_;
        result.displayId_ = displayId_;
        result.name_ = name_;
        result.displayName_ = displayName_;
        result.timestampNs_ = timestampNs_;
        result.durationPs_ = durationPs_;
        if (eventsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            events_ = java.util.Collections.unmodifiableList(events_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.events_ = events_;
        } else {
          result.events_ = eventsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.tensorflow.proto.profiler.Xplane.XLine) {
          return mergeFrom((org.tensorflow.proto.profiler.Xplane.XLine)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.tensorflow.proto.profiler.Xplane.XLine other) {
        if (other == org.tensorflow.proto.profiler.Xplane.XLine.getDefaultInstance()) return this;
        if (other.getId() != 0L) {
          setId(other.getId());
        }
        if (other.getDisplayId() != 0L) {
          setDisplayId(other.getDisplayId());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getDisplayName().isEmpty()) {
          displayName_ = other.displayName_;
          onChanged();
        }
        if (other.getTimestampNs() != 0L) {
          setTimestampNs(other.getTimestampNs());
        }
        if (other.getDurationPs() != 0L) {
          setDurationPs(other.getDurationPs());
        }
        if (eventsBuilder_ == null) {
          if (!other.events_.isEmpty()) {
            if (events_.isEmpty()) {
              events_ = other.events_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEventsIsMutable();
              events_.addAll(other.events_);
            }
            onChanged();
          }
        } else {
          if (!other.events_.isEmpty()) {
            if (eventsBuilder_.isEmpty()) {
              eventsBuilder_.dispose();
              eventsBuilder_ = null;
              events_ = other.events_;
              bitField0_ = (bitField0_ & ~0x00000001);
              eventsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEventsFieldBuilder() : null;
            } else {
              eventsBuilder_.addAllMessages(other.events_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                id_ = input.readInt64();

                break;
              } // case 8
              case 18: {
                name_ = input.readStringRequireUtf8();

                break;
              } // case 18
              case 24: {
                timestampNs_ = input.readInt64();

                break;
              } // case 24
              case 34: {
                org.tensorflow.proto.profiler.Xplane.XEvent m =
                    input.readMessage(
                        org.tensorflow.proto.profiler.Xplane.XEvent.parser(),
                        extensionRegistry);
                if (eventsBuilder_ == null) {
                  ensureEventsIsMutable();
                  events_.add(m);
                } else {
                  eventsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 72: {
                durationPs_ = input.readInt64();

                break;
              } // case 72
              case 80: {
                displayId_ = input.readInt64();

                break;
              } // case 80
              case 90: {
                displayName_ = input.readStringRequireUtf8();

                break;
              } // case 90
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long id_ ;
      /**
       * <pre>
       * Id of this line, can be repeated within an XPlane. All XLines with the
       * same id are effectively the same timeline.
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * Id of this line, can be repeated within an XPlane. All XLines with the
       * same id are effectively the same timeline.
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(long value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Id of this line, can be repeated within an XPlane. All XLines with the
       * same id are effectively the same timeline.
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = 0L;
        onChanged();
        return this;
      }

      private long displayId_ ;
      /**
       * <pre>
       * Display id of this line. Multiple lines with the same display_id are
       * grouped together in the same trace viewer row.
       * </pre>
       *
       * <code>int64 display_id = 10;</code>
       * @return The displayId.
       */
      @java.lang.Override
      public long getDisplayId() {
        return displayId_;
      }
      /**
       * <pre>
       * Display id of this line. Multiple lines with the same display_id are
       * grouped together in the same trace viewer row.
       * </pre>
       *
       * <code>int64 display_id = 10;</code>
       * @param value The displayId to set.
       * @return This builder for chaining.
       */
      public Builder setDisplayId(long value) {
        
        displayId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Display id of this line. Multiple lines with the same display_id are
       * grouped together in the same trace viewer row.
       * </pre>
       *
       * <code>int64 display_id = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisplayId() {
        
        displayId_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of this XLine.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of this XLine.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of this XLine.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of this XLine.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of this XLine.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object displayName_ = "";
      /**
       * <pre>
       * Name of this XLine to display in trace viewer.
       * </pre>
       *
       * <code>string display_name = 11;</code>
       * @return The displayName.
       */
      public java.lang.String getDisplayName() {
        java.lang.Object ref = displayName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          displayName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of this XLine to display in trace viewer.
       * </pre>
       *
       * <code>string display_name = 11;</code>
       * @return The bytes for displayName.
       */
      public com.google.protobuf.ByteString
          getDisplayNameBytes() {
        java.lang.Object ref = displayName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          displayName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of this XLine to display in trace viewer.
       * </pre>
       *
       * <code>string display_name = 11;</code>
       * @param value The displayName to set.
       * @return This builder for chaining.
       */
      public Builder setDisplayName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        displayName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of this XLine to display in trace viewer.
       * </pre>
       *
       * <code>string display_name = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisplayName() {
        
        displayName_ = getDefaultInstance().getDisplayName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of this XLine to display in trace viewer.
       * </pre>
       *
       * <code>string display_name = 11;</code>
       * @param value The bytes for displayName to set.
       * @return This builder for chaining.
       */
      public Builder setDisplayNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        displayName_ = value;
        onChanged();
        return this;
      }

      private long timestampNs_ ;
      /**
       * <pre>
       * Start time of this line in nanoseconds since the UNIX epoch.
       * XEvent.offset_ps is relative to this timestamp.
       * </pre>
       *
       * <code>int64 timestamp_ns = 3;</code>
       * @return The timestampNs.
       */
      @java.lang.Override
      public long getTimestampNs() {
        return timestampNs_;
      }
      /**
       * <pre>
       * Start time of this line in nanoseconds since the UNIX epoch.
       * XEvent.offset_ps is relative to this timestamp.
       * </pre>
       *
       * <code>int64 timestamp_ns = 3;</code>
       * @param value The timestampNs to set.
       * @return This builder for chaining.
       */
      public Builder setTimestampNs(long value) {
        
        timestampNs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Start time of this line in nanoseconds since the UNIX epoch.
       * XEvent.offset_ps is relative to this timestamp.
       * </pre>
       *
       * <code>int64 timestamp_ns = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestampNs() {
        
        timestampNs_ = 0L;
        onChanged();
        return this;
      }

      private long durationPs_ ;
      /**
       * <pre>
       * Profiling duration for this line in picoseconds.
       * </pre>
       *
       * <code>int64 duration_ps = 9;</code>
       * @return The durationPs.
       */
      @java.lang.Override
      public long getDurationPs() {
        return durationPs_;
      }
      /**
       * <pre>
       * Profiling duration for this line in picoseconds.
       * </pre>
       *
       * <code>int64 duration_ps = 9;</code>
       * @param value The durationPs to set.
       * @return This builder for chaining.
       */
      public Builder setDurationPs(long value) {
        
        durationPs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Profiling duration for this line in picoseconds.
       * </pre>
       *
       * <code>int64 duration_ps = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearDurationPs() {
        
        durationPs_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<org.tensorflow.proto.profiler.Xplane.XEvent> events_ =
        java.util.Collections.emptyList();
      private void ensureEventsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          events_ = new java.util.ArrayList<org.tensorflow.proto.profiler.Xplane.XEvent>(events_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XEvent, org.tensorflow.proto.profiler.Xplane.XEvent.Builder, org.tensorflow.proto.profiler.Xplane.XEventOrBuilder> eventsBuilder_;

      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XEvent> getEventsList() {
        if (eventsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(events_);
        } else {
          return eventsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public int getEventsCount() {
        if (eventsBuilder_ == null) {
          return events_.size();
        } else {
          return eventsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XEvent getEvents(int index) {
        if (eventsBuilder_ == null) {
          return events_.get(index);
        } else {
          return eventsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public Builder setEvents(
          int index, org.tensorflow.proto.profiler.Xplane.XEvent value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.set(index, value);
          onChanged();
        } else {
          eventsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public Builder setEvents(
          int index, org.tensorflow.proto.profiler.Xplane.XEvent.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.set(index, builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public Builder addEvents(org.tensorflow.proto.profiler.Xplane.XEvent value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.add(value);
          onChanged();
        } else {
          eventsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public Builder addEvents(
          int index, org.tensorflow.proto.profiler.Xplane.XEvent value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.add(index, value);
          onChanged();
        } else {
          eventsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public Builder addEvents(
          org.tensorflow.proto.profiler.Xplane.XEvent.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.add(builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public Builder addEvents(
          int index, org.tensorflow.proto.profiler.Xplane.XEvent.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.add(index, builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public Builder addAllEvents(
          java.lang.Iterable<? extends org.tensorflow.proto.profiler.Xplane.XEvent> values) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, events_);
          onChanged();
        } else {
          eventsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public Builder clearEvents() {
        if (eventsBuilder_ == null) {
          events_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          eventsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public Builder removeEvents(int index) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.remove(index);
          onChanged();
        } else {
          eventsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XEvent.Builder getEventsBuilder(
          int index) {
        return getEventsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XEventOrBuilder getEventsOrBuilder(
          int index) {
        if (eventsBuilder_ == null) {
          return events_.get(index);  } else {
          return eventsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XEventOrBuilder> 
           getEventsOrBuilderList() {
        if (eventsBuilder_ != null) {
          return eventsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(events_);
        }
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XEvent.Builder addEventsBuilder() {
        return getEventsFieldBuilder().addBuilder(
            org.tensorflow.proto.profiler.Xplane.XEvent.getDefaultInstance());
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XEvent.Builder addEventsBuilder(
          int index) {
        return getEventsFieldBuilder().addBuilder(
            index, org.tensorflow.proto.profiler.Xplane.XEvent.getDefaultInstance());
      }
      /**
       * <pre>
       * XEvents within the same XLine should not overlap in time, but they can be
       * nested.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XEvent events = 4;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XEvent.Builder> 
           getEventsBuilderList() {
        return getEventsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XEvent, org.tensorflow.proto.profiler.Xplane.XEvent.Builder, org.tensorflow.proto.profiler.Xplane.XEventOrBuilder> 
          getEventsFieldBuilder() {
        if (eventsBuilder_ == null) {
          eventsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.tensorflow.proto.profiler.Xplane.XEvent, org.tensorflow.proto.profiler.Xplane.XEvent.Builder, org.tensorflow.proto.profiler.Xplane.XEventOrBuilder>(
                  events_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          events_ = null;
        }
        return eventsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.profiler.XLine)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.profiler.XLine)
    private static final org.tensorflow.proto.profiler.Xplane.XLine DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.tensorflow.proto.profiler.Xplane.XLine();
    }

    public static org.tensorflow.proto.profiler.Xplane.XLine getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<XLine>
        PARSER = new com.google.protobuf.AbstractParser<XLine>() {
      @java.lang.Override
      public XLine parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<XLine> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XLine> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XLine getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface XEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.profiler.XEvent)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * XEventMetadata.id of corresponding metadata.
     * </pre>
     *
     * <code>int64 metadata_id = 1;</code>
     * @return The metadataId.
     */
    long getMetadataId();

    /**
     * <pre>
     * Start time of the event in picoseconds, as offset from
     * XLine.timestamp_ns().
     * </pre>
     *
     * <code>int64 offset_ps = 2;</code>
     * @return Whether the offsetPs field is set.
     */
    boolean hasOffsetPs();
    /**
     * <pre>
     * Start time of the event in picoseconds, as offset from
     * XLine.timestamp_ns().
     * </pre>
     *
     * <code>int64 offset_ps = 2;</code>
     * @return The offsetPs.
     */
    long getOffsetPs();

    /**
     * <pre>
     * Number of occurrences of the event, if aggregated.
     * </pre>
     *
     * <code>int64 num_occurrences = 5;</code>
     * @return Whether the numOccurrences field is set.
     */
    boolean hasNumOccurrences();
    /**
     * <pre>
     * Number of occurrences of the event, if aggregated.
     * </pre>
     *
     * <code>int64 num_occurrences = 5;</code>
     * @return The numOccurrences.
     */
    long getNumOccurrences();

    /**
     * <pre>
     * Duration of the event in picoseconds. Can be zero for an instant event.
     * </pre>
     *
     * <code>int64 duration_ps = 3;</code>
     * @return The durationPs.
     */
    long getDurationPs();

    /**
     * <pre>
     * XStats associated with the event.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
     */
    java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> 
        getStatsList();
    /**
     * <pre>
     * XStats associated with the event.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XStat getStats(int index);
    /**
     * <pre>
     * XStats associated with the event.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
     */
    int getStatsCount();
    /**
     * <pre>
     * XStats associated with the event.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
     */
    java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
        getStatsOrBuilderList();
    /**
     * <pre>
     * XStats associated with the event.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XStatOrBuilder getStatsOrBuilder(
        int index);

    public org.tensorflow.proto.profiler.Xplane.XEvent.DataCase getDataCase();
  }
  /**
   * <pre>
   * An XEvent is a trace event, optionally annotated with XStats.
   * Next ID: 6
   * </pre>
   *
   * Protobuf type {@code tensorflow.profiler.XEvent}
   */
  public static final class XEvent extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.profiler.XEvent)
      XEventOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XEvent.newBuilder() to construct.
    private XEvent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XEvent() {
      stats_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new XEvent();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.proto.profiler.Xplane.XEvent.class, org.tensorflow.proto.profiler.Xplane.XEvent.Builder.class);
    }

    private int dataCase_ = 0;
    private java.lang.Object data_;
    public enum DataCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      OFFSET_PS(2),
      NUM_OCCURRENCES(5),
      DATA_NOT_SET(0);
      private final int value;
      private DataCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static DataCase valueOf(int value) {
        return forNumber(value);
      }

      public static DataCase forNumber(int value) {
        switch (value) {
          case 2: return OFFSET_PS;
          case 5: return NUM_OCCURRENCES;
          case 0: return DATA_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public DataCase
    getDataCase() {
      return DataCase.forNumber(
          dataCase_);
    }

    public static final int METADATA_ID_FIELD_NUMBER = 1;
    private long metadataId_;
    /**
     * <pre>
     * XEventMetadata.id of corresponding metadata.
     * </pre>
     *
     * <code>int64 metadata_id = 1;</code>
     * @return The metadataId.
     */
    @java.lang.Override
    public long getMetadataId() {
      return metadataId_;
    }

    public static final int OFFSET_PS_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Start time of the event in picoseconds, as offset from
     * XLine.timestamp_ns().
     * </pre>
     *
     * <code>int64 offset_ps = 2;</code>
     * @return Whether the offsetPs field is set.
     */
    @java.lang.Override
    public boolean hasOffsetPs() {
      return dataCase_ == 2;
    }
    /**
     * <pre>
     * Start time of the event in picoseconds, as offset from
     * XLine.timestamp_ns().
     * </pre>
     *
     * <code>int64 offset_ps = 2;</code>
     * @return The offsetPs.
     */
    @java.lang.Override
    public long getOffsetPs() {
      if (dataCase_ == 2) {
        return (java.lang.Long) data_;
      }
      return 0L;
    }

    public static final int NUM_OCCURRENCES_FIELD_NUMBER = 5;
    /**
     * <pre>
     * Number of occurrences of the event, if aggregated.
     * </pre>
     *
     * <code>int64 num_occurrences = 5;</code>
     * @return Whether the numOccurrences field is set.
     */
    @java.lang.Override
    public boolean hasNumOccurrences() {
      return dataCase_ == 5;
    }
    /**
     * <pre>
     * Number of occurrences of the event, if aggregated.
     * </pre>
     *
     * <code>int64 num_occurrences = 5;</code>
     * @return The numOccurrences.
     */
    @java.lang.Override
    public long getNumOccurrences() {
      if (dataCase_ == 5) {
        return (java.lang.Long) data_;
      }
      return 0L;
    }

    public static final int DURATION_PS_FIELD_NUMBER = 3;
    private long durationPs_;
    /**
     * <pre>
     * Duration of the event in picoseconds. Can be zero for an instant event.
     * </pre>
     *
     * <code>int64 duration_ps = 3;</code>
     * @return The durationPs.
     */
    @java.lang.Override
    public long getDurationPs() {
      return durationPs_;
    }

    public static final int STATS_FIELD_NUMBER = 4;
    private java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> stats_;
    /**
     * <pre>
     * XStats associated with the event.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> getStatsList() {
      return stats_;
    }
    /**
     * <pre>
     * XStats associated with the event.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
        getStatsOrBuilderList() {
      return stats_;
    }
    /**
     * <pre>
     * XStats associated with the event.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
     */
    @java.lang.Override
    public int getStatsCount() {
      return stats_.size();
    }
    /**
     * <pre>
     * XStats associated with the event.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XStat getStats(int index) {
      return stats_.get(index);
    }
    /**
     * <pre>
     * XStats associated with the event.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XStatOrBuilder getStatsOrBuilder(
        int index) {
      return stats_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (metadataId_ != 0L) {
        output.writeInt64(1, metadataId_);
      }
      if (dataCase_ == 2) {
        output.writeInt64(
            2, (long)((java.lang.Long) data_));
      }
      if (durationPs_ != 0L) {
        output.writeInt64(3, durationPs_);
      }
      for (int i = 0; i < stats_.size(); i++) {
        output.writeMessage(4, stats_.get(i));
      }
      if (dataCase_ == 5) {
        output.writeInt64(
            5, (long)((java.lang.Long) data_));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (metadataId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, metadataId_);
      }
      if (dataCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              2, (long)((java.lang.Long) data_));
      }
      if (durationPs_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, durationPs_);
      }
      for (int i = 0; i < stats_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, stats_.get(i));
      }
      if (dataCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              5, (long)((java.lang.Long) data_));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.tensorflow.proto.profiler.Xplane.XEvent)) {
        return super.equals(obj);
      }
      org.tensorflow.proto.profiler.Xplane.XEvent other = (org.tensorflow.proto.profiler.Xplane.XEvent) obj;

      if (getMetadataId()
          != other.getMetadataId()) return false;
      if (getDurationPs()
          != other.getDurationPs()) return false;
      if (!getStatsList()
          .equals(other.getStatsList())) return false;
      if (!getDataCase().equals(other.getDataCase())) return false;
      switch (dataCase_) {
        case 2:
          if (getOffsetPs()
              != other.getOffsetPs()) return false;
          break;
        case 5:
          if (getNumOccurrences()
              != other.getNumOccurrences()) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + METADATA_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMetadataId());
      hash = (37 * hash) + DURATION_PS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDurationPs());
      if (getStatsCount() > 0) {
        hash = (37 * hash) + STATS_FIELD_NUMBER;
        hash = (53 * hash) + getStatsList().hashCode();
      }
      switch (dataCase_) {
        case 2:
          hash = (37 * hash) + OFFSET_PS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getOffsetPs());
          break;
        case 5:
          hash = (37 * hash) + NUM_OCCURRENCES_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getNumOccurrences());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.tensorflow.proto.profiler.Xplane.XEvent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.tensorflow.proto.profiler.Xplane.XEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An XEvent is a trace event, optionally annotated with XStats.
     * Next ID: 6
     * </pre>
     *
     * Protobuf type {@code tensorflow.profiler.XEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.profiler.XEvent)
        org.tensorflow.proto.profiler.Xplane.XEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XEvent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.tensorflow.proto.profiler.Xplane.XEvent.class, org.tensorflow.proto.profiler.Xplane.XEvent.Builder.class);
      }

      // Construct using org.tensorflow.proto.profiler.Xplane.XEvent.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        metadataId_ = 0L;

        durationPs_ = 0L;

        if (statsBuilder_ == null) {
          stats_ = java.util.Collections.emptyList();
        } else {
          stats_ = null;
          statsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        dataCase_ = 0;
        data_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XEvent_descriptor;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XEvent getDefaultInstanceForType() {
        return org.tensorflow.proto.profiler.Xplane.XEvent.getDefaultInstance();
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XEvent build() {
        org.tensorflow.proto.profiler.Xplane.XEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XEvent buildPartial() {
        org.tensorflow.proto.profiler.Xplane.XEvent result = new org.tensorflow.proto.profiler.Xplane.XEvent(this);
        int from_bitField0_ = bitField0_;
        result.metadataId_ = metadataId_;
        if (dataCase_ == 2) {
          result.data_ = data_;
        }
        if (dataCase_ == 5) {
          result.data_ = data_;
        }
        result.durationPs_ = durationPs_;
        if (statsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            stats_ = java.util.Collections.unmodifiableList(stats_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.stats_ = stats_;
        } else {
          result.stats_ = statsBuilder_.build();
        }
        result.dataCase_ = dataCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.tensorflow.proto.profiler.Xplane.XEvent) {
          return mergeFrom((org.tensorflow.proto.profiler.Xplane.XEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.tensorflow.proto.profiler.Xplane.XEvent other) {
        if (other == org.tensorflow.proto.profiler.Xplane.XEvent.getDefaultInstance()) return this;
        if (other.getMetadataId() != 0L) {
          setMetadataId(other.getMetadataId());
        }
        if (other.getDurationPs() != 0L) {
          setDurationPs(other.getDurationPs());
        }
        if (statsBuilder_ == null) {
          if (!other.stats_.isEmpty()) {
            if (stats_.isEmpty()) {
              stats_ = other.stats_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureStatsIsMutable();
              stats_.addAll(other.stats_);
            }
            onChanged();
          }
        } else {
          if (!other.stats_.isEmpty()) {
            if (statsBuilder_.isEmpty()) {
              statsBuilder_.dispose();
              statsBuilder_ = null;
              stats_ = other.stats_;
              bitField0_ = (bitField0_ & ~0x00000001);
              statsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getStatsFieldBuilder() : null;
            } else {
              statsBuilder_.addAllMessages(other.stats_);
            }
          }
        }
        switch (other.getDataCase()) {
          case OFFSET_PS: {
            setOffsetPs(other.getOffsetPs());
            break;
          }
          case NUM_OCCURRENCES: {
            setNumOccurrences(other.getNumOccurrences());
            break;
          }
          case DATA_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                metadataId_ = input.readInt64();

                break;
              } // case 8
              case 16: {
                data_ = input.readInt64();
                dataCase_ = 2;
                break;
              } // case 16
              case 24: {
                durationPs_ = input.readInt64();

                break;
              } // case 24
              case 34: {
                org.tensorflow.proto.profiler.Xplane.XStat m =
                    input.readMessage(
                        org.tensorflow.proto.profiler.Xplane.XStat.parser(),
                        extensionRegistry);
                if (statsBuilder_ == null) {
                  ensureStatsIsMutable();
                  stats_.add(m);
                } else {
                  statsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 40: {
                data_ = input.readInt64();
                dataCase_ = 5;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int dataCase_ = 0;
      private java.lang.Object data_;
      public DataCase
          getDataCase() {
        return DataCase.forNumber(
            dataCase_);
      }

      public Builder clearData() {
        dataCase_ = 0;
        data_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private long metadataId_ ;
      /**
       * <pre>
       * XEventMetadata.id of corresponding metadata.
       * </pre>
       *
       * <code>int64 metadata_id = 1;</code>
       * @return The metadataId.
       */
      @java.lang.Override
      public long getMetadataId() {
        return metadataId_;
      }
      /**
       * <pre>
       * XEventMetadata.id of corresponding metadata.
       * </pre>
       *
       * <code>int64 metadata_id = 1;</code>
       * @param value The metadataId to set.
       * @return This builder for chaining.
       */
      public Builder setMetadataId(long value) {
        
        metadataId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * XEventMetadata.id of corresponding metadata.
       * </pre>
       *
       * <code>int64 metadata_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetadataId() {
        
        metadataId_ = 0L;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * Start time of the event in picoseconds, as offset from
       * XLine.timestamp_ns().
       * </pre>
       *
       * <code>int64 offset_ps = 2;</code>
       * @return Whether the offsetPs field is set.
       */
      public boolean hasOffsetPs() {
        return dataCase_ == 2;
      }
      /**
       * <pre>
       * Start time of the event in picoseconds, as offset from
       * XLine.timestamp_ns().
       * </pre>
       *
       * <code>int64 offset_ps = 2;</code>
       * @return The offsetPs.
       */
      public long getOffsetPs() {
        if (dataCase_ == 2) {
          return (java.lang.Long) data_;
        }
        return 0L;
      }
      /**
       * <pre>
       * Start time of the event in picoseconds, as offset from
       * XLine.timestamp_ns().
       * </pre>
       *
       * <code>int64 offset_ps = 2;</code>
       * @param value The offsetPs to set.
       * @return This builder for chaining.
       */
      public Builder setOffsetPs(long value) {
        dataCase_ = 2;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Start time of the event in picoseconds, as offset from
       * XLine.timestamp_ns().
       * </pre>
       *
       * <code>int64 offset_ps = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearOffsetPs() {
        if (dataCase_ == 2) {
          dataCase_ = 0;
          data_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Number of occurrences of the event, if aggregated.
       * </pre>
       *
       * <code>int64 num_occurrences = 5;</code>
       * @return Whether the numOccurrences field is set.
       */
      public boolean hasNumOccurrences() {
        return dataCase_ == 5;
      }
      /**
       * <pre>
       * Number of occurrences of the event, if aggregated.
       * </pre>
       *
       * <code>int64 num_occurrences = 5;</code>
       * @return The numOccurrences.
       */
      public long getNumOccurrences() {
        if (dataCase_ == 5) {
          return (java.lang.Long) data_;
        }
        return 0L;
      }
      /**
       * <pre>
       * Number of occurrences of the event, if aggregated.
       * </pre>
       *
       * <code>int64 num_occurrences = 5;</code>
       * @param value The numOccurrences to set.
       * @return This builder for chaining.
       */
      public Builder setNumOccurrences(long value) {
        dataCase_ = 5;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of occurrences of the event, if aggregated.
       * </pre>
       *
       * <code>int64 num_occurrences = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumOccurrences() {
        if (dataCase_ == 5) {
          dataCase_ = 0;
          data_ = null;
          onChanged();
        }
        return this;
      }

      private long durationPs_ ;
      /**
       * <pre>
       * Duration of the event in picoseconds. Can be zero for an instant event.
       * </pre>
       *
       * <code>int64 duration_ps = 3;</code>
       * @return The durationPs.
       */
      @java.lang.Override
      public long getDurationPs() {
        return durationPs_;
      }
      /**
       * <pre>
       * Duration of the event in picoseconds. Can be zero for an instant event.
       * </pre>
       *
       * <code>int64 duration_ps = 3;</code>
       * @param value The durationPs to set.
       * @return This builder for chaining.
       */
      public Builder setDurationPs(long value) {
        
        durationPs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Duration of the event in picoseconds. Can be zero for an instant event.
       * </pre>
       *
       * <code>int64 duration_ps = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDurationPs() {
        
        durationPs_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> stats_ =
        java.util.Collections.emptyList();
      private void ensureStatsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          stats_ = new java.util.ArrayList<org.tensorflow.proto.profiler.Xplane.XStat>(stats_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XStat, org.tensorflow.proto.profiler.Xplane.XStat.Builder, org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> statsBuilder_;

      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> getStatsList() {
        if (statsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(stats_);
        } else {
          return statsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public int getStatsCount() {
        if (statsBuilder_ == null) {
          return stats_.size();
        } else {
          return statsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat getStats(int index) {
        if (statsBuilder_ == null) {
          return stats_.get(index);
        } else {
          return statsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public Builder setStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatsIsMutable();
          stats_.set(index, value);
          onChanged();
        } else {
          statsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public Builder setStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat.Builder builderForValue) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.set(index, builderForValue.build());
          onChanged();
        } else {
          statsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public Builder addStats(org.tensorflow.proto.profiler.Xplane.XStat value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatsIsMutable();
          stats_.add(value);
          onChanged();
        } else {
          statsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public Builder addStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatsIsMutable();
          stats_.add(index, value);
          onChanged();
        } else {
          statsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public Builder addStats(
          org.tensorflow.proto.profiler.Xplane.XStat.Builder builderForValue) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.add(builderForValue.build());
          onChanged();
        } else {
          statsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public Builder addStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat.Builder builderForValue) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.add(index, builderForValue.build());
          onChanged();
        } else {
          statsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public Builder addAllStats(
          java.lang.Iterable<? extends org.tensorflow.proto.profiler.Xplane.XStat> values) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, stats_);
          onChanged();
        } else {
          statsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public Builder clearStats() {
        if (statsBuilder_ == null) {
          stats_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          statsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public Builder removeStats(int index) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.remove(index);
          onChanged();
        } else {
          statsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat.Builder getStatsBuilder(
          int index) {
        return getStatsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStatOrBuilder getStatsOrBuilder(
          int index) {
        if (statsBuilder_ == null) {
          return stats_.get(index);  } else {
          return statsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
           getStatsOrBuilderList() {
        if (statsBuilder_ != null) {
          return statsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(stats_);
        }
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat.Builder addStatsBuilder() {
        return getStatsFieldBuilder().addBuilder(
            org.tensorflow.proto.profiler.Xplane.XStat.getDefaultInstance());
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat.Builder addStatsBuilder(
          int index) {
        return getStatsFieldBuilder().addBuilder(
            index, org.tensorflow.proto.profiler.Xplane.XStat.getDefaultInstance());
      }
      /**
       * <pre>
       * XStats associated with the event.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 4;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XStat.Builder> 
           getStatsBuilderList() {
        return getStatsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XStat, org.tensorflow.proto.profiler.Xplane.XStat.Builder, org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
          getStatsFieldBuilder() {
        if (statsBuilder_ == null) {
          statsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.tensorflow.proto.profiler.Xplane.XStat, org.tensorflow.proto.profiler.Xplane.XStat.Builder, org.tensorflow.proto.profiler.Xplane.XStatOrBuilder>(
                  stats_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          stats_ = null;
        }
        return statsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.profiler.XEvent)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.profiler.XEvent)
    private static final org.tensorflow.proto.profiler.Xplane.XEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.tensorflow.proto.profiler.Xplane.XEvent();
    }

    public static org.tensorflow.proto.profiler.Xplane.XEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<XEvent>
        PARSER = new com.google.protobuf.AbstractParser<XEvent>() {
      @java.lang.Override
      public XEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<XEvent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XEvent> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XEvent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface XStatOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.profiler.XStat)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * XStatMetadata.id of corresponding metadata.
     * </pre>
     *
     * <code>int64 metadata_id = 1;</code>
     * @return The metadataId.
     */
    long getMetadataId();

    /**
     * <code>double double_value = 2;</code>
     * @return Whether the doubleValue field is set.
     */
    boolean hasDoubleValue();
    /**
     * <code>double double_value = 2;</code>
     * @return The doubleValue.
     */
    double getDoubleValue();

    /**
     * <code>uint64 uint64_value = 3;</code>
     * @return Whether the uint64Value field is set.
     */
    boolean hasUint64Value();
    /**
     * <code>uint64 uint64_value = 3;</code>
     * @return The uint64Value.
     */
    long getUint64Value();

    /**
     * <code>int64 int64_value = 4;</code>
     * @return Whether the int64Value field is set.
     */
    boolean hasInt64Value();
    /**
     * <code>int64 int64_value = 4;</code>
     * @return The int64Value.
     */
    long getInt64Value();

    /**
     * <code>string str_value = 5;</code>
     * @return Whether the strValue field is set.
     */
    boolean hasStrValue();
    /**
     * <code>string str_value = 5;</code>
     * @return The strValue.
     */
    java.lang.String getStrValue();
    /**
     * <code>string str_value = 5;</code>
     * @return The bytes for strValue.
     */
    com.google.protobuf.ByteString
        getStrValueBytes();

    /**
     * <code>bytes bytes_value = 6;</code>
     * @return Whether the bytesValue field is set.
     */
    boolean hasBytesValue();
    /**
     * <code>bytes bytes_value = 6;</code>
     * @return The bytesValue.
     */
    com.google.protobuf.ByteString getBytesValue();

    /**
     * <pre>
     * A string value that stored in XStatMetadata::name.
     * </pre>
     *
     * <code>uint64 ref_value = 7;</code>
     * @return Whether the refValue field is set.
     */
    boolean hasRefValue();
    /**
     * <pre>
     * A string value that stored in XStatMetadata::name.
     * </pre>
     *
     * <code>uint64 ref_value = 7;</code>
     * @return The refValue.
     */
    long getRefValue();

    public org.tensorflow.proto.profiler.Xplane.XStat.ValueCase getValueCase();
  }
  /**
   * <pre>
   * An XStat is a named value associated with an XEvent, e.g., a performance
   * counter value, a metric computed by a formula applied over nested XEvents
   * and XStats.
   * Next ID: 8
   * </pre>
   *
   * Protobuf type {@code tensorflow.profiler.XStat}
   */
  public static final class XStat extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.profiler.XStat)
      XStatOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XStat.newBuilder() to construct.
    private XStat(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XStat() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new XStat();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XStat_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XStat_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.proto.profiler.Xplane.XStat.class, org.tensorflow.proto.profiler.Xplane.XStat.Builder.class);
    }

    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      DOUBLE_VALUE(2),
      UINT64_VALUE(3),
      INT64_VALUE(4),
      STR_VALUE(5),
      BYTES_VALUE(6),
      REF_VALUE(7),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 2: return DOUBLE_VALUE;
          case 3: return UINT64_VALUE;
          case 4: return INT64_VALUE;
          case 5: return STR_VALUE;
          case 6: return BYTES_VALUE;
          case 7: return REF_VALUE;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public static final int METADATA_ID_FIELD_NUMBER = 1;
    private long metadataId_;
    /**
     * <pre>
     * XStatMetadata.id of corresponding metadata.
     * </pre>
     *
     * <code>int64 metadata_id = 1;</code>
     * @return The metadataId.
     */
    @java.lang.Override
    public long getMetadataId() {
      return metadataId_;
    }

    public static final int DOUBLE_VALUE_FIELD_NUMBER = 2;
    /**
     * <code>double double_value = 2;</code>
     * @return Whether the doubleValue field is set.
     */
    @java.lang.Override
    public boolean hasDoubleValue() {
      return valueCase_ == 2;
    }
    /**
     * <code>double double_value = 2;</code>
     * @return The doubleValue.
     */
    @java.lang.Override
    public double getDoubleValue() {
      if (valueCase_ == 2) {
        return (java.lang.Double) value_;
      }
      return 0D;
    }

    public static final int UINT64_VALUE_FIELD_NUMBER = 3;
    /**
     * <code>uint64 uint64_value = 3;</code>
     * @return Whether the uint64Value field is set.
     */
    @java.lang.Override
    public boolean hasUint64Value() {
      return valueCase_ == 3;
    }
    /**
     * <code>uint64 uint64_value = 3;</code>
     * @return The uint64Value.
     */
    @java.lang.Override
    public long getUint64Value() {
      if (valueCase_ == 3) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int INT64_VALUE_FIELD_NUMBER = 4;
    /**
     * <code>int64 int64_value = 4;</code>
     * @return Whether the int64Value field is set.
     */
    @java.lang.Override
    public boolean hasInt64Value() {
      return valueCase_ == 4;
    }
    /**
     * <code>int64 int64_value = 4;</code>
     * @return The int64Value.
     */
    @java.lang.Override
    public long getInt64Value() {
      if (valueCase_ == 4) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int STR_VALUE_FIELD_NUMBER = 5;
    /**
     * <code>string str_value = 5;</code>
     * @return Whether the strValue field is set.
     */
    public boolean hasStrValue() {
      return valueCase_ == 5;
    }
    /**
     * <code>string str_value = 5;</code>
     * @return The strValue.
     */
    public java.lang.String getStrValue() {
      java.lang.Object ref = "";
      if (valueCase_ == 5) {
        ref = value_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (valueCase_ == 5) {
          value_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string str_value = 5;</code>
     * @return The bytes for strValue.
     */
    public com.google.protobuf.ByteString
        getStrValueBytes() {
      java.lang.Object ref = "";
      if (valueCase_ == 5) {
        ref = value_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (valueCase_ == 5) {
          value_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BYTES_VALUE_FIELD_NUMBER = 6;
    /**
     * <code>bytes bytes_value = 6;</code>
     * @return Whether the bytesValue field is set.
     */
    @java.lang.Override
    public boolean hasBytesValue() {
      return valueCase_ == 6;
    }
    /**
     * <code>bytes bytes_value = 6;</code>
     * @return The bytesValue.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getBytesValue() {
      if (valueCase_ == 6) {
        return (com.google.protobuf.ByteString) value_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }

    public static final int REF_VALUE_FIELD_NUMBER = 7;
    /**
     * <pre>
     * A string value that stored in XStatMetadata::name.
     * </pre>
     *
     * <code>uint64 ref_value = 7;</code>
     * @return Whether the refValue field is set.
     */
    @java.lang.Override
    public boolean hasRefValue() {
      return valueCase_ == 7;
    }
    /**
     * <pre>
     * A string value that stored in XStatMetadata::name.
     * </pre>
     *
     * <code>uint64 ref_value = 7;</code>
     * @return The refValue.
     */
    @java.lang.Override
    public long getRefValue() {
      if (valueCase_ == 7) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (metadataId_ != 0L) {
        output.writeInt64(1, metadataId_);
      }
      if (valueCase_ == 2) {
        output.writeDouble(
            2, (double)((java.lang.Double) value_));
      }
      if (valueCase_ == 3) {
        output.writeUInt64(
            3, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 4) {
        output.writeInt64(
            4, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 5) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, value_);
      }
      if (valueCase_ == 6) {
        output.writeBytes(
            6, (com.google.protobuf.ByteString) value_);
      }
      if (valueCase_ == 7) {
        output.writeUInt64(
            7, (long)((java.lang.Long) value_));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (metadataId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, metadataId_);
      }
      if (valueCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              2, (double)((java.lang.Double) value_));
      }
      if (valueCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              3, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              4, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 5) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, value_);
      }
      if (valueCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              6, (com.google.protobuf.ByteString) value_);
      }
      if (valueCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              7, (long)((java.lang.Long) value_));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.tensorflow.proto.profiler.Xplane.XStat)) {
        return super.equals(obj);
      }
      org.tensorflow.proto.profiler.Xplane.XStat other = (org.tensorflow.proto.profiler.Xplane.XStat) obj;

      if (getMetadataId()
          != other.getMetadataId()) return false;
      if (!getValueCase().equals(other.getValueCase())) return false;
      switch (valueCase_) {
        case 2:
          if (java.lang.Double.doubleToLongBits(getDoubleValue())
              != java.lang.Double.doubleToLongBits(
                  other.getDoubleValue())) return false;
          break;
        case 3:
          if (getUint64Value()
              != other.getUint64Value()) return false;
          break;
        case 4:
          if (getInt64Value()
              != other.getInt64Value()) return false;
          break;
        case 5:
          if (!getStrValue()
              .equals(other.getStrValue())) return false;
          break;
        case 6:
          if (!getBytesValue()
              .equals(other.getBytesValue())) return false;
          break;
        case 7:
          if (getRefValue()
              != other.getRefValue()) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + METADATA_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMetadataId());
      switch (valueCase_) {
        case 2:
          hash = (37 * hash) + DOUBLE_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getDoubleValue()));
          break;
        case 3:
          hash = (37 * hash) + UINT64_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getUint64Value());
          break;
        case 4:
          hash = (37 * hash) + INT64_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getInt64Value());
          break;
        case 5:
          hash = (37 * hash) + STR_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + getStrValue().hashCode();
          break;
        case 6:
          hash = (37 * hash) + BYTES_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + getBytesValue().hashCode();
          break;
        case 7:
          hash = (37 * hash) + REF_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getRefValue());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.tensorflow.proto.profiler.Xplane.XStat parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStat parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.tensorflow.proto.profiler.Xplane.XStat prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An XStat is a named value associated with an XEvent, e.g., a performance
     * counter value, a metric computed by a formula applied over nested XEvents
     * and XStats.
     * Next ID: 8
     * </pre>
     *
     * Protobuf type {@code tensorflow.profiler.XStat}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.profiler.XStat)
        org.tensorflow.proto.profiler.Xplane.XStatOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XStat_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XStat_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.tensorflow.proto.profiler.Xplane.XStat.class, org.tensorflow.proto.profiler.Xplane.XStat.Builder.class);
      }

      // Construct using org.tensorflow.proto.profiler.Xplane.XStat.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        metadataId_ = 0L;

        valueCase_ = 0;
        value_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XStat_descriptor;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XStat getDefaultInstanceForType() {
        return org.tensorflow.proto.profiler.Xplane.XStat.getDefaultInstance();
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XStat build() {
        org.tensorflow.proto.profiler.Xplane.XStat result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XStat buildPartial() {
        org.tensorflow.proto.profiler.Xplane.XStat result = new org.tensorflow.proto.profiler.Xplane.XStat(this);
        result.metadataId_ = metadataId_;
        if (valueCase_ == 2) {
          result.value_ = value_;
        }
        if (valueCase_ == 3) {
          result.value_ = value_;
        }
        if (valueCase_ == 4) {
          result.value_ = value_;
        }
        if (valueCase_ == 5) {
          result.value_ = value_;
        }
        if (valueCase_ == 6) {
          result.value_ = value_;
        }
        if (valueCase_ == 7) {
          result.value_ = value_;
        }
        result.valueCase_ = valueCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.tensorflow.proto.profiler.Xplane.XStat) {
          return mergeFrom((org.tensorflow.proto.profiler.Xplane.XStat)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.tensorflow.proto.profiler.Xplane.XStat other) {
        if (other == org.tensorflow.proto.profiler.Xplane.XStat.getDefaultInstance()) return this;
        if (other.getMetadataId() != 0L) {
          setMetadataId(other.getMetadataId());
        }
        switch (other.getValueCase()) {
          case DOUBLE_VALUE: {
            setDoubleValue(other.getDoubleValue());
            break;
          }
          case UINT64_VALUE: {
            setUint64Value(other.getUint64Value());
            break;
          }
          case INT64_VALUE: {
            setInt64Value(other.getInt64Value());
            break;
          }
          case STR_VALUE: {
            valueCase_ = 5;
            value_ = other.value_;
            onChanged();
            break;
          }
          case BYTES_VALUE: {
            setBytesValue(other.getBytesValue());
            break;
          }
          case REF_VALUE: {
            setRefValue(other.getRefValue());
            break;
          }
          case VALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                metadataId_ = input.readInt64();

                break;
              } // case 8
              case 17: {
                value_ = input.readDouble();
                valueCase_ = 2;
                break;
              } // case 17
              case 24: {
                value_ = input.readUInt64();
                valueCase_ = 3;
                break;
              } // case 24
              case 32: {
                value_ = input.readInt64();
                valueCase_ = 4;
                break;
              } // case 32
              case 42: {
                java.lang.String s = input.readStringRequireUtf8();
                valueCase_ = 5;
                value_ = s;
                break;
              } // case 42
              case 50: {
                value_ = input.readBytes();
                valueCase_ = 6;
                break;
              } // case 50
              case 56: {
                value_ = input.readUInt64();
                valueCase_ = 7;
                break;
              } // case 56
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int valueCase_ = 0;
      private java.lang.Object value_;
      public ValueCase
          getValueCase() {
        return ValueCase.forNumber(
            valueCase_);
      }

      public Builder clearValue() {
        valueCase_ = 0;
        value_ = null;
        onChanged();
        return this;
      }


      private long metadataId_ ;
      /**
       * <pre>
       * XStatMetadata.id of corresponding metadata.
       * </pre>
       *
       * <code>int64 metadata_id = 1;</code>
       * @return The metadataId.
       */
      @java.lang.Override
      public long getMetadataId() {
        return metadataId_;
      }
      /**
       * <pre>
       * XStatMetadata.id of corresponding metadata.
       * </pre>
       *
       * <code>int64 metadata_id = 1;</code>
       * @param value The metadataId to set.
       * @return This builder for chaining.
       */
      public Builder setMetadataId(long value) {
        
        metadataId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * XStatMetadata.id of corresponding metadata.
       * </pre>
       *
       * <code>int64 metadata_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetadataId() {
        
        metadataId_ = 0L;
        onChanged();
        return this;
      }

      /**
       * <code>double double_value = 2;</code>
       * @return Whether the doubleValue field is set.
       */
      public boolean hasDoubleValue() {
        return valueCase_ == 2;
      }
      /**
       * <code>double double_value = 2;</code>
       * @return The doubleValue.
       */
      public double getDoubleValue() {
        if (valueCase_ == 2) {
          return (java.lang.Double) value_;
        }
        return 0D;
      }
      /**
       * <code>double double_value = 2;</code>
       * @param value The doubleValue to set.
       * @return This builder for chaining.
       */
      public Builder setDoubleValue(double value) {
        valueCase_ = 2;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double double_value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDoubleValue() {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>uint64 uint64_value = 3;</code>
       * @return Whether the uint64Value field is set.
       */
      public boolean hasUint64Value() {
        return valueCase_ == 3;
      }
      /**
       * <code>uint64 uint64_value = 3;</code>
       * @return The uint64Value.
       */
      public long getUint64Value() {
        if (valueCase_ == 3) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>uint64 uint64_value = 3;</code>
       * @param value The uint64Value to set.
       * @return This builder for chaining.
       */
      public Builder setUint64Value(long value) {
        valueCase_ = 3;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 uint64_value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearUint64Value() {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int64 int64_value = 4;</code>
       * @return Whether the int64Value field is set.
       */
      public boolean hasInt64Value() {
        return valueCase_ == 4;
      }
      /**
       * <code>int64 int64_value = 4;</code>
       * @return The int64Value.
       */
      public long getInt64Value() {
        if (valueCase_ == 4) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>int64 int64_value = 4;</code>
       * @param value The int64Value to set.
       * @return This builder for chaining.
       */
      public Builder setInt64Value(long value) {
        valueCase_ = 4;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 int64_value = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearInt64Value() {
        if (valueCase_ == 4) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>string str_value = 5;</code>
       * @return Whether the strValue field is set.
       */
      @java.lang.Override
      public boolean hasStrValue() {
        return valueCase_ == 5;
      }
      /**
       * <code>string str_value = 5;</code>
       * @return The strValue.
       */
      @java.lang.Override
      public java.lang.String getStrValue() {
        java.lang.Object ref = "";
        if (valueCase_ == 5) {
          ref = value_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (valueCase_ == 5) {
            value_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string str_value = 5;</code>
       * @return The bytes for strValue.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getStrValueBytes() {
        java.lang.Object ref = "";
        if (valueCase_ == 5) {
          ref = value_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (valueCase_ == 5) {
            value_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string str_value = 5;</code>
       * @param value The strValue to set.
       * @return This builder for chaining.
       */
      public Builder setStrValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  valueCase_ = 5;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string str_value = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearStrValue() {
        if (valueCase_ == 5) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>string str_value = 5;</code>
       * @param value The bytes for strValue to set.
       * @return This builder for chaining.
       */
      public Builder setStrValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        valueCase_ = 5;
        value_ = value;
        onChanged();
        return this;
      }

      /**
       * <code>bytes bytes_value = 6;</code>
       * @return Whether the bytesValue field is set.
       */
      public boolean hasBytesValue() {
        return valueCase_ == 6;
      }
      /**
       * <code>bytes bytes_value = 6;</code>
       * @return The bytesValue.
       */
      public com.google.protobuf.ByteString getBytesValue() {
        if (valueCase_ == 6) {
          return (com.google.protobuf.ByteString) value_;
        }
        return com.google.protobuf.ByteString.EMPTY;
      }
      /**
       * <code>bytes bytes_value = 6;</code>
       * @param value The bytesValue to set.
       * @return This builder for chaining.
       */
      public Builder setBytesValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  valueCase_ = 6;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes bytes_value = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearBytesValue() {
        if (valueCase_ == 6) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * A string value that stored in XStatMetadata::name.
       * </pre>
       *
       * <code>uint64 ref_value = 7;</code>
       * @return Whether the refValue field is set.
       */
      public boolean hasRefValue() {
        return valueCase_ == 7;
      }
      /**
       * <pre>
       * A string value that stored in XStatMetadata::name.
       * </pre>
       *
       * <code>uint64 ref_value = 7;</code>
       * @return The refValue.
       */
      public long getRefValue() {
        if (valueCase_ == 7) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <pre>
       * A string value that stored in XStatMetadata::name.
       * </pre>
       *
       * <code>uint64 ref_value = 7;</code>
       * @param value The refValue to set.
       * @return This builder for chaining.
       */
      public Builder setRefValue(long value) {
        valueCase_ = 7;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A string value that stored in XStatMetadata::name.
       * </pre>
       *
       * <code>uint64 ref_value = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearRefValue() {
        if (valueCase_ == 7) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.profiler.XStat)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.profiler.XStat)
    private static final org.tensorflow.proto.profiler.Xplane.XStat DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.tensorflow.proto.profiler.Xplane.XStat();
    }

    public static org.tensorflow.proto.profiler.Xplane.XStat getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<XStat>
        PARSER = new com.google.protobuf.AbstractParser<XStat>() {
      @java.lang.Override
      public XStat parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<XStat> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XStat> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XStat getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface XEventMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.profiler.XEventMetadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * XPlane.event_metadata map key.
     * </pre>
     *
     * <code>int64 id = 1;</code>
     * @return The id.
     */
    long getId();

    /**
     * <pre>
     * Name of the event.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of the event.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Name of the event shown in trace viewer.
     * </pre>
     *
     * <code>string display_name = 4;</code>
     * @return The displayName.
     */
    java.lang.String getDisplayName();
    /**
     * <pre>
     * Name of the event shown in trace viewer.
     * </pre>
     *
     * <code>string display_name = 4;</code>
     * @return The bytes for displayName.
     */
    com.google.protobuf.ByteString
        getDisplayNameBytes();

    /**
     * <pre>
     * Additional metadata in serialized format.
     * </pre>
     *
     * <code>bytes metadata = 3;</code>
     * @return The metadata.
     */
    com.google.protobuf.ByteString getMetadata();

    /**
     * <pre>
     * XStats that are constant for all XEvents with the same metadata_id.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
     */
    java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> 
        getStatsList();
    /**
     * <pre>
     * XStats that are constant for all XEvents with the same metadata_id.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XStat getStats(int index);
    /**
     * <pre>
     * XStats that are constant for all XEvents with the same metadata_id.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
     */
    int getStatsCount();
    /**
     * <pre>
     * XStats that are constant for all XEvents with the same metadata_id.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
     */
    java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
        getStatsOrBuilderList();
    /**
     * <pre>
     * XStats that are constant for all XEvents with the same metadata_id.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
     */
    org.tensorflow.proto.profiler.Xplane.XStatOrBuilder getStatsOrBuilder(
        int index);

    /**
     * <pre>
     * XPlane.event_metadata map key for children events.
     * </pre>
     *
     * <code>repeated int64 child_id = 6;</code>
     * @return A list containing the childId.
     */
    java.util.List<java.lang.Long> getChildIdList();
    /**
     * <pre>
     * XPlane.event_metadata map key for children events.
     * </pre>
     *
     * <code>repeated int64 child_id = 6;</code>
     * @return The count of childId.
     */
    int getChildIdCount();
    /**
     * <pre>
     * XPlane.event_metadata map key for children events.
     * </pre>
     *
     * <code>repeated int64 child_id = 6;</code>
     * @param index The index of the element to return.
     * @return The childId at the given index.
     */
    long getChildId(int index);
  }
  /**
   * <pre>
   * Metadata for an XEvent, corresponds to an event type and is shared by
   * all XEvents with the same metadata_id.
   * Next ID: 7
   * </pre>
   *
   * Protobuf type {@code tensorflow.profiler.XEventMetadata}
   */
  public static final class XEventMetadata extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.profiler.XEventMetadata)
      XEventMetadataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XEventMetadata.newBuilder() to construct.
    private XEventMetadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XEventMetadata() {
      name_ = "";
      displayName_ = "";
      metadata_ = com.google.protobuf.ByteString.EMPTY;
      stats_ = java.util.Collections.emptyList();
      childId_ = emptyLongList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new XEventMetadata();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XEventMetadata_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XEventMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.proto.profiler.Xplane.XEventMetadata.class, org.tensorflow.proto.profiler.Xplane.XEventMetadata.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <pre>
     * XPlane.event_metadata map key.
     * </pre>
     *
     * <code>int64 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name of the event.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the event.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DISPLAY_NAME_FIELD_NUMBER = 4;
    private volatile java.lang.Object displayName_;
    /**
     * <pre>
     * Name of the event shown in trace viewer.
     * </pre>
     *
     * <code>string display_name = 4;</code>
     * @return The displayName.
     */
    @java.lang.Override
    public java.lang.String getDisplayName() {
      java.lang.Object ref = displayName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        displayName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the event shown in trace viewer.
     * </pre>
     *
     * <code>string display_name = 4;</code>
     * @return The bytes for displayName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      java.lang.Object ref = displayName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        displayName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int METADATA_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString metadata_;
    /**
     * <pre>
     * Additional metadata in serialized format.
     * </pre>
     *
     * <code>bytes metadata = 3;</code>
     * @return The metadata.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getMetadata() {
      return metadata_;
    }

    public static final int STATS_FIELD_NUMBER = 5;
    private java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> stats_;
    /**
     * <pre>
     * XStats that are constant for all XEvents with the same metadata_id.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> getStatsList() {
      return stats_;
    }
    /**
     * <pre>
     * XStats that are constant for all XEvents with the same metadata_id.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
        getStatsOrBuilderList() {
      return stats_;
    }
    /**
     * <pre>
     * XStats that are constant for all XEvents with the same metadata_id.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
     */
    @java.lang.Override
    public int getStatsCount() {
      return stats_.size();
    }
    /**
     * <pre>
     * XStats that are constant for all XEvents with the same metadata_id.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XStat getStats(int index) {
      return stats_.get(index);
    }
    /**
     * <pre>
     * XStats that are constant for all XEvents with the same metadata_id.
     * Each of these XStats should have a different metadata_id.
     * </pre>
     *
     * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
     */
    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XStatOrBuilder getStatsOrBuilder(
        int index) {
      return stats_.get(index);
    }

    public static final int CHILD_ID_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.LongList childId_;
    /**
     * <pre>
     * XPlane.event_metadata map key for children events.
     * </pre>
     *
     * <code>repeated int64 child_id = 6;</code>
     * @return A list containing the childId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getChildIdList() {
      return childId_;
    }
    /**
     * <pre>
     * XPlane.event_metadata map key for children events.
     * </pre>
     *
     * <code>repeated int64 child_id = 6;</code>
     * @return The count of childId.
     */
    public int getChildIdCount() {
      return childId_.size();
    }
    /**
     * <pre>
     * XPlane.event_metadata map key for children events.
     * </pre>
     *
     * <code>repeated int64 child_id = 6;</code>
     * @param index The index of the element to return.
     * @return The childId at the given index.
     */
    public long getChildId(int index) {
      return childId_.getLong(index);
    }
    private int childIdMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (id_ != 0L) {
        output.writeInt64(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (!metadata_.isEmpty()) {
        output.writeBytes(3, metadata_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(displayName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, displayName_);
      }
      for (int i = 0; i < stats_.size(); i++) {
        output.writeMessage(5, stats_.get(i));
      }
      if (getChildIdList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(childIdMemoizedSerializedSize);
      }
      for (int i = 0; i < childId_.size(); i++) {
        output.writeInt64NoTag(childId_.getLong(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (!metadata_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, metadata_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(displayName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, displayName_);
      }
      for (int i = 0; i < stats_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, stats_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < childId_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(childId_.getLong(i));
        }
        size += dataSize;
        if (!getChildIdList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        childIdMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.tensorflow.proto.profiler.Xplane.XEventMetadata)) {
        return super.equals(obj);
      }
      org.tensorflow.proto.profiler.Xplane.XEventMetadata other = (org.tensorflow.proto.profiler.Xplane.XEventMetadata) obj;

      if (getId()
          != other.getId()) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getDisplayName()
          .equals(other.getDisplayName())) return false;
      if (!getMetadata()
          .equals(other.getMetadata())) return false;
      if (!getStatsList()
          .equals(other.getStatsList())) return false;
      if (!getChildIdList()
          .equals(other.getChildIdList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + DISPLAY_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getDisplayName().hashCode();
      hash = (37 * hash) + METADATA_FIELD_NUMBER;
      hash = (53 * hash) + getMetadata().hashCode();
      if (getStatsCount() > 0) {
        hash = (37 * hash) + STATS_FIELD_NUMBER;
        hash = (53 * hash) + getStatsList().hashCode();
      }
      if (getChildIdCount() > 0) {
        hash = (37 * hash) + CHILD_ID_FIELD_NUMBER;
        hash = (53 * hash) + getChildIdList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.tensorflow.proto.profiler.Xplane.XEventMetadata prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Metadata for an XEvent, corresponds to an event type and is shared by
     * all XEvents with the same metadata_id.
     * Next ID: 7
     * </pre>
     *
     * Protobuf type {@code tensorflow.profiler.XEventMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.profiler.XEventMetadata)
        org.tensorflow.proto.profiler.Xplane.XEventMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XEventMetadata_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XEventMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.tensorflow.proto.profiler.Xplane.XEventMetadata.class, org.tensorflow.proto.profiler.Xplane.XEventMetadata.Builder.class);
      }

      // Construct using org.tensorflow.proto.profiler.Xplane.XEventMetadata.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = 0L;

        name_ = "";

        displayName_ = "";

        metadata_ = com.google.protobuf.ByteString.EMPTY;

        if (statsBuilder_ == null) {
          stats_ = java.util.Collections.emptyList();
        } else {
          stats_ = null;
          statsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        childId_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XEventMetadata_descriptor;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XEventMetadata getDefaultInstanceForType() {
        return org.tensorflow.proto.profiler.Xplane.XEventMetadata.getDefaultInstance();
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XEventMetadata build() {
        org.tensorflow.proto.profiler.Xplane.XEventMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XEventMetadata buildPartial() {
        org.tensorflow.proto.profiler.Xplane.XEventMetadata result = new org.tensorflow.proto.profiler.Xplane.XEventMetadata(this);
        int from_bitField0_ = bitField0_;
        result.id_ = id_;
        result.name_ = name_;
        result.displayName_ = displayName_;
        result.metadata_ = metadata_;
        if (statsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            stats_ = java.util.Collections.unmodifiableList(stats_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.stats_ = stats_;
        } else {
          result.stats_ = statsBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          childId_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.childId_ = childId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.tensorflow.proto.profiler.Xplane.XEventMetadata) {
          return mergeFrom((org.tensorflow.proto.profiler.Xplane.XEventMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.tensorflow.proto.profiler.Xplane.XEventMetadata other) {
        if (other == org.tensorflow.proto.profiler.Xplane.XEventMetadata.getDefaultInstance()) return this;
        if (other.getId() != 0L) {
          setId(other.getId());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getDisplayName().isEmpty()) {
          displayName_ = other.displayName_;
          onChanged();
        }
        if (other.getMetadata() != com.google.protobuf.ByteString.EMPTY) {
          setMetadata(other.getMetadata());
        }
        if (statsBuilder_ == null) {
          if (!other.stats_.isEmpty()) {
            if (stats_.isEmpty()) {
              stats_ = other.stats_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureStatsIsMutable();
              stats_.addAll(other.stats_);
            }
            onChanged();
          }
        } else {
          if (!other.stats_.isEmpty()) {
            if (statsBuilder_.isEmpty()) {
              statsBuilder_.dispose();
              statsBuilder_ = null;
              stats_ = other.stats_;
              bitField0_ = (bitField0_ & ~0x00000001);
              statsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getStatsFieldBuilder() : null;
            } else {
              statsBuilder_.addAllMessages(other.stats_);
            }
          }
        }
        if (!other.childId_.isEmpty()) {
          if (childId_.isEmpty()) {
            childId_ = other.childId_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureChildIdIsMutable();
            childId_.addAll(other.childId_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                id_ = input.readInt64();

                break;
              } // case 8
              case 18: {
                name_ = input.readStringRequireUtf8();

                break;
              } // case 18
              case 26: {
                metadata_ = input.readBytes();

                break;
              } // case 26
              case 34: {
                displayName_ = input.readStringRequireUtf8();

                break;
              } // case 34
              case 42: {
                org.tensorflow.proto.profiler.Xplane.XStat m =
                    input.readMessage(
                        org.tensorflow.proto.profiler.Xplane.XStat.parser(),
                        extensionRegistry);
                if (statsBuilder_ == null) {
                  ensureStatsIsMutable();
                  stats_.add(m);
                } else {
                  statsBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 48: {
                long v = input.readInt64();
                ensureChildIdIsMutable();
                childId_.addLong(v);
                break;
              } // case 48
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureChildIdIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  childId_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long id_ ;
      /**
       * <pre>
       * XPlane.event_metadata map key.
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * XPlane.event_metadata map key.
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(long value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * XPlane.event_metadata map key.
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of the event.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the event.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the event.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the event.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the event.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object displayName_ = "";
      /**
       * <pre>
       * Name of the event shown in trace viewer.
       * </pre>
       *
       * <code>string display_name = 4;</code>
       * @return The displayName.
       */
      public java.lang.String getDisplayName() {
        java.lang.Object ref = displayName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          displayName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the event shown in trace viewer.
       * </pre>
       *
       * <code>string display_name = 4;</code>
       * @return The bytes for displayName.
       */
      public com.google.protobuf.ByteString
          getDisplayNameBytes() {
        java.lang.Object ref = displayName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          displayName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the event shown in trace viewer.
       * </pre>
       *
       * <code>string display_name = 4;</code>
       * @param value The displayName to set.
       * @return This builder for chaining.
       */
      public Builder setDisplayName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        displayName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the event shown in trace viewer.
       * </pre>
       *
       * <code>string display_name = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisplayName() {
        
        displayName_ = getDefaultInstance().getDisplayName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the event shown in trace viewer.
       * </pre>
       *
       * <code>string display_name = 4;</code>
       * @param value The bytes for displayName to set.
       * @return This builder for chaining.
       */
      public Builder setDisplayNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        displayName_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString metadata_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Additional metadata in serialized format.
       * </pre>
       *
       * <code>bytes metadata = 3;</code>
       * @return The metadata.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getMetadata() {
        return metadata_;
      }
      /**
       * <pre>
       * Additional metadata in serialized format.
       * </pre>
       *
       * <code>bytes metadata = 3;</code>
       * @param value The metadata to set.
       * @return This builder for chaining.
       */
      public Builder setMetadata(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        metadata_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional metadata in serialized format.
       * </pre>
       *
       * <code>bytes metadata = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetadata() {
        
        metadata_ = getDefaultInstance().getMetadata();
        onChanged();
        return this;
      }

      private java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> stats_ =
        java.util.Collections.emptyList();
      private void ensureStatsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          stats_ = new java.util.ArrayList<org.tensorflow.proto.profiler.Xplane.XStat>(stats_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XStat, org.tensorflow.proto.profiler.Xplane.XStat.Builder, org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> statsBuilder_;

      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XStat> getStatsList() {
        if (statsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(stats_);
        } else {
          return statsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public int getStatsCount() {
        if (statsBuilder_ == null) {
          return stats_.size();
        } else {
          return statsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat getStats(int index) {
        if (statsBuilder_ == null) {
          return stats_.get(index);
        } else {
          return statsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public Builder setStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatsIsMutable();
          stats_.set(index, value);
          onChanged();
        } else {
          statsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public Builder setStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat.Builder builderForValue) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.set(index, builderForValue.build());
          onChanged();
        } else {
          statsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public Builder addStats(org.tensorflow.proto.profiler.Xplane.XStat value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatsIsMutable();
          stats_.add(value);
          onChanged();
        } else {
          statsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public Builder addStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatsIsMutable();
          stats_.add(index, value);
          onChanged();
        } else {
          statsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public Builder addStats(
          org.tensorflow.proto.profiler.Xplane.XStat.Builder builderForValue) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.add(builderForValue.build());
          onChanged();
        } else {
          statsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public Builder addStats(
          int index, org.tensorflow.proto.profiler.Xplane.XStat.Builder builderForValue) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.add(index, builderForValue.build());
          onChanged();
        } else {
          statsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public Builder addAllStats(
          java.lang.Iterable<? extends org.tensorflow.proto.profiler.Xplane.XStat> values) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, stats_);
          onChanged();
        } else {
          statsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public Builder clearStats() {
        if (statsBuilder_ == null) {
          stats_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          statsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public Builder removeStats(int index) {
        if (statsBuilder_ == null) {
          ensureStatsIsMutable();
          stats_.remove(index);
          onChanged();
        } else {
          statsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat.Builder getStatsBuilder(
          int index) {
        return getStatsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStatOrBuilder getStatsOrBuilder(
          int index) {
        if (statsBuilder_ == null) {
          return stats_.get(index);  } else {
          return statsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public java.util.List<? extends org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
           getStatsOrBuilderList() {
        if (statsBuilder_ != null) {
          return statsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(stats_);
        }
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat.Builder addStatsBuilder() {
        return getStatsFieldBuilder().addBuilder(
            org.tensorflow.proto.profiler.Xplane.XStat.getDefaultInstance());
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public org.tensorflow.proto.profiler.Xplane.XStat.Builder addStatsBuilder(
          int index) {
        return getStatsFieldBuilder().addBuilder(
            index, org.tensorflow.proto.profiler.Xplane.XStat.getDefaultInstance());
      }
      /**
       * <pre>
       * XStats that are constant for all XEvents with the same metadata_id.
       * Each of these XStats should have a different metadata_id.
       * </pre>
       *
       * <code>repeated .tensorflow.profiler.XStat stats = 5;</code>
       */
      public java.util.List<org.tensorflow.proto.profiler.Xplane.XStat.Builder> 
           getStatsBuilderList() {
        return getStatsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.tensorflow.proto.profiler.Xplane.XStat, org.tensorflow.proto.profiler.Xplane.XStat.Builder, org.tensorflow.proto.profiler.Xplane.XStatOrBuilder> 
          getStatsFieldBuilder() {
        if (statsBuilder_ == null) {
          statsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.tensorflow.proto.profiler.Xplane.XStat, org.tensorflow.proto.profiler.Xplane.XStat.Builder, org.tensorflow.proto.profiler.Xplane.XStatOrBuilder>(
                  stats_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          stats_ = null;
        }
        return statsBuilder_;
      }

      private com.google.protobuf.Internal.LongList childId_ = emptyLongList();
      private void ensureChildIdIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          childId_ = mutableCopy(childId_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * XPlane.event_metadata map key for children events.
       * </pre>
       *
       * <code>repeated int64 child_id = 6;</code>
       * @return A list containing the childId.
       */
      public java.util.List<java.lang.Long>
          getChildIdList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(childId_) : childId_;
      }
      /**
       * <pre>
       * XPlane.event_metadata map key for children events.
       * </pre>
       *
       * <code>repeated int64 child_id = 6;</code>
       * @return The count of childId.
       */
      public int getChildIdCount() {
        return childId_.size();
      }
      /**
       * <pre>
       * XPlane.event_metadata map key for children events.
       * </pre>
       *
       * <code>repeated int64 child_id = 6;</code>
       * @param index The index of the element to return.
       * @return The childId at the given index.
       */
      public long getChildId(int index) {
        return childId_.getLong(index);
      }
      /**
       * <pre>
       * XPlane.event_metadata map key for children events.
       * </pre>
       *
       * <code>repeated int64 child_id = 6;</code>
       * @param index The index to set the value at.
       * @param value The childId to set.
       * @return This builder for chaining.
       */
      public Builder setChildId(
          int index, long value) {
        ensureChildIdIsMutable();
        childId_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * XPlane.event_metadata map key for children events.
       * </pre>
       *
       * <code>repeated int64 child_id = 6;</code>
       * @param value The childId to add.
       * @return This builder for chaining.
       */
      public Builder addChildId(long value) {
        ensureChildIdIsMutable();
        childId_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * XPlane.event_metadata map key for children events.
       * </pre>
       *
       * <code>repeated int64 child_id = 6;</code>
       * @param values The childId to add.
       * @return This builder for chaining.
       */
      public Builder addAllChildId(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureChildIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, childId_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * XPlane.event_metadata map key for children events.
       * </pre>
       *
       * <code>repeated int64 child_id = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearChildId() {
        childId_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.profiler.XEventMetadata)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.profiler.XEventMetadata)
    private static final org.tensorflow.proto.profiler.Xplane.XEventMetadata DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.tensorflow.proto.profiler.Xplane.XEventMetadata();
    }

    public static org.tensorflow.proto.profiler.Xplane.XEventMetadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<XEventMetadata>
        PARSER = new com.google.protobuf.AbstractParser<XEventMetadata>() {
      @java.lang.Override
      public XEventMetadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<XEventMetadata> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XEventMetadata> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XEventMetadata getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface XStatMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.profiler.XStatMetadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * XPlane.stat_metadata map key.
     * </pre>
     *
     * <code>int64 id = 1;</code>
     * @return The id.
     */
    long getId();

    /**
     * <pre>
     * Name of the stat (should be short).
     * Two XStatMetadata with different id should have different names.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of the stat (should be short).
     * Two XStatMetadata with different id should have different names.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Description of the stat (might be long).
     * </pre>
     *
     * <code>string description = 3;</code>
     * @return The description.
     */
    java.lang.String getDescription();
    /**
     * <pre>
     * Description of the stat (might be long).
     * </pre>
     *
     * <code>string description = 3;</code>
     * @return The bytes for description.
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();
  }
  /**
   * <pre>
   * Metadata for an XStat, corresponds to a stat type and is shared by all
   * XStats with the same metadata_id.
   * Next ID: 4
   * </pre>
   *
   * Protobuf type {@code tensorflow.profiler.XStatMetadata}
   */
  public static final class XStatMetadata extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.profiler.XStatMetadata)
      XStatMetadataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XStatMetadata.newBuilder() to construct.
    private XStatMetadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XStatMetadata() {
      name_ = "";
      description_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new XStatMetadata();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XStatMetadata_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XStatMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.proto.profiler.Xplane.XStatMetadata.class, org.tensorflow.proto.profiler.Xplane.XStatMetadata.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <pre>
     * XPlane.stat_metadata map key.
     * </pre>
     *
     * <code>int64 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name of the stat (should be short).
     * Two XStatMetadata with different id should have different names.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the stat (should be short).
     * Two XStatMetadata with different id should have different names.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 3;
    private volatile java.lang.Object description_;
    /**
     * <pre>
     * Description of the stat (might be long).
     * </pre>
     *
     * <code>string description = 3;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Description of the stat (might be long).
     * </pre>
     *
     * <code>string description = 3;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0L) {
        output.writeInt64(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(description_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, description_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(description_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, description_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.tensorflow.proto.profiler.Xplane.XStatMetadata)) {
        return super.equals(obj);
      }
      org.tensorflow.proto.profiler.Xplane.XStatMetadata other = (org.tensorflow.proto.profiler.Xplane.XStatMetadata) obj;

      if (getId()
          != other.getId()) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getDescription()
          .equals(other.getDescription())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + getDescription().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.tensorflow.proto.profiler.Xplane.XStatMetadata prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Metadata for an XStat, corresponds to a stat type and is shared by all
     * XStats with the same metadata_id.
     * Next ID: 4
     * </pre>
     *
     * Protobuf type {@code tensorflow.profiler.XStatMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.profiler.XStatMetadata)
        org.tensorflow.proto.profiler.Xplane.XStatMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XStatMetadata_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XStatMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.tensorflow.proto.profiler.Xplane.XStatMetadata.class, org.tensorflow.proto.profiler.Xplane.XStatMetadata.Builder.class);
      }

      // Construct using org.tensorflow.proto.profiler.Xplane.XStatMetadata.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = 0L;

        name_ = "";

        description_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.tensorflow.proto.profiler.Xplane.internal_static_tensorflow_profiler_XStatMetadata_descriptor;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XStatMetadata getDefaultInstanceForType() {
        return org.tensorflow.proto.profiler.Xplane.XStatMetadata.getDefaultInstance();
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XStatMetadata build() {
        org.tensorflow.proto.profiler.Xplane.XStatMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.tensorflow.proto.profiler.Xplane.XStatMetadata buildPartial() {
        org.tensorflow.proto.profiler.Xplane.XStatMetadata result = new org.tensorflow.proto.profiler.Xplane.XStatMetadata(this);
        result.id_ = id_;
        result.name_ = name_;
        result.description_ = description_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.tensorflow.proto.profiler.Xplane.XStatMetadata) {
          return mergeFrom((org.tensorflow.proto.profiler.Xplane.XStatMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.tensorflow.proto.profiler.Xplane.XStatMetadata other) {
        if (other == org.tensorflow.proto.profiler.Xplane.XStatMetadata.getDefaultInstance()) return this;
        if (other.getId() != 0L) {
          setId(other.getId());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getDescription().isEmpty()) {
          description_ = other.description_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                id_ = input.readInt64();

                break;
              } // case 8
              case 18: {
                name_ = input.readStringRequireUtf8();

                break;
              } // case 18
              case 26: {
                description_ = input.readStringRequireUtf8();

                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private long id_ ;
      /**
       * <pre>
       * XPlane.stat_metadata map key.
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * XPlane.stat_metadata map key.
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(long value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * XPlane.stat_metadata map key.
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of the stat (should be short).
       * Two XStatMetadata with different id should have different names.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the stat (should be short).
       * Two XStatMetadata with different id should have different names.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the stat (should be short).
       * Two XStatMetadata with different id should have different names.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the stat (should be short).
       * Two XStatMetadata with different id should have different names.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the stat (should be short).
       * Two XStatMetadata with different id should have different names.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object description_ = "";
      /**
       * <pre>
       * Description of the stat (might be long).
       * </pre>
       *
       * <code>string description = 3;</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Description of the stat (might be long).
       * </pre>
       *
       * <code>string description = 3;</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Description of the stat (might be long).
       * </pre>
       *
       * <code>string description = 3;</code>
       * @param value The description to set.
       * @return This builder for chaining.
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        description_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Description of the stat (might be long).
       * </pre>
       *
       * <code>string description = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDescription() {
        
        description_ = getDefaultInstance().getDescription();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Description of the stat (might be long).
       * </pre>
       *
       * <code>string description = 3;</code>
       * @param value The bytes for description to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        description_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.profiler.XStatMetadata)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.profiler.XStatMetadata)
    private static final org.tensorflow.proto.profiler.Xplane.XStatMetadata DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.tensorflow.proto.profiler.Xplane.XStatMetadata();
    }

    public static org.tensorflow.proto.profiler.Xplane.XStatMetadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<XStatMetadata>
        PARSER = new com.google.protobuf.AbstractParser<XStatMetadata>() {
      @java.lang.Override
      public XStatMetadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<XStatMetadata> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XStatMetadata> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.tensorflow.proto.profiler.Xplane.XStatMetadata getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_profiler_XSpace_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_profiler_XSpace_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_profiler_XPlane_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_profiler_XPlane_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_profiler_XPlane_EventMetadataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_profiler_XPlane_EventMetadataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_profiler_XPlane_StatMetadataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_profiler_XPlane_StatMetadataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_profiler_XLine_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_profiler_XLine_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_profiler_XEvent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_profiler_XEvent_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_profiler_XStat_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_profiler_XStat_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_profiler_XEventMetadata_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_profiler_XEventMetadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_profiler_XStatMetadata_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_profiler_XStatMetadata_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"tsl/profiler/protobuf/xplane.proto\022\023te" +
      "nsorflow.profiler\"j\n\006XSpace\022+\n\006planes\030\001 " +
      "\003(\0132\033.tensorflow.profiler.XPlane\022\016\n\006erro" +
      "rs\030\002 \003(\t\022\020\n\010warnings\030\003 \003(\t\022\021\n\thostnames\030" +
      "\004 \003(\t\"\272\003\n\006XPlane\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001" +
      "(\t\022)\n\005lines\030\003 \003(\0132\032.tensorflow.profiler." +
      "XLine\022F\n\016event_metadata\030\004 \003(\0132..tensorfl" +
      "ow.profiler.XPlane.EventMetadataEntry\022D\n" +
      "\rstat_metadata\030\005 \003(\0132-.tensorflow.profil" +
      "er.XPlane.StatMetadataEntry\022)\n\005stats\030\006 \003" +
      "(\0132\032.tensorflow.profiler.XStat\032Y\n\022EventM" +
      "etadataEntry\022\013\n\003key\030\001 \001(\003\0222\n\005value\030\002 \001(\013" +
      "2#.tensorflow.profiler.XEventMetadata:\0028" +
      "\001\032W\n\021StatMetadataEntry\022\013\n\003key\030\001 \001(\003\0221\n\005v" +
      "alue\030\002 \001(\0132\".tensorflow.profiler.XStatMe" +
      "tadata:\0028\001\"\273\001\n\005XLine\022\n\n\002id\030\001 \001(\003\022\022\n\ndisp" +
      "lay_id\030\n \001(\003\022\014\n\004name\030\002 \001(\t\022\024\n\014display_na" +
      "me\030\013 \001(\t\022\024\n\014timestamp_ns\030\003 \001(\003\022\023\n\013durati" +
      "on_ps\030\t \001(\003\022+\n\006events\030\004 \003(\0132\033.tensorflow" +
      ".profiler.XEventJ\004\010\005\020\006J\004\010\006\020\007J\004\010\007\020\010J\004\010\010\020\t" +
      "\"\225\001\n\006XEvent\022\023\n\013metadata_id\030\001 \001(\003\022\023\n\toffs" +
      "et_ps\030\002 \001(\003H\000\022\031\n\017num_occurrences\030\005 \001(\003H\000" +
      "\022\023\n\013duration_ps\030\003 \001(\003\022)\n\005stats\030\004 \003(\0132\032.t" +
      "ensorflow.profiler.XStatB\006\n\004data\"\255\001\n\005XSt" +
      "at\022\023\n\013metadata_id\030\001 \001(\003\022\026\n\014double_value\030" +
      "\002 \001(\001H\000\022\026\n\014uint64_value\030\003 \001(\004H\000\022\025\n\013int64" +
      "_value\030\004 \001(\003H\000\022\023\n\tstr_value\030\005 \001(\tH\000\022\025\n\013b" +
      "ytes_value\030\006 \001(\014H\000\022\023\n\tref_value\030\007 \001(\004H\000B" +
      "\007\n\005value\"\217\001\n\016XEventMetadata\022\n\n\002id\030\001 \001(\003\022" +
      "\014\n\004name\030\002 \001(\t\022\024\n\014display_name\030\004 \001(\t\022\020\n\010m" +
      "etadata\030\003 \001(\014\022)\n\005stats\030\005 \003(\0132\032.tensorflo" +
      "w.profiler.XStat\022\020\n\010child_id\030\006 \003(\003\">\n\rXS" +
      "tatMetadata\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\023\n" +
      "\013description\030\003 \001(\tB\"\n\035org.tensorflow.pro" +
      "to.profiler\370\001\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_tensorflow_profiler_XSpace_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_tensorflow_profiler_XSpace_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_profiler_XSpace_descriptor,
        new java.lang.String[] { "Planes", "Errors", "Warnings", "Hostnames", });
    internal_static_tensorflow_profiler_XPlane_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_tensorflow_profiler_XPlane_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_profiler_XPlane_descriptor,
        new java.lang.String[] { "Id", "Name", "Lines", "EventMetadata", "StatMetadata", "Stats", });
    internal_static_tensorflow_profiler_XPlane_EventMetadataEntry_descriptor =
      internal_static_tensorflow_profiler_XPlane_descriptor.getNestedTypes().get(0);
    internal_static_tensorflow_profiler_XPlane_EventMetadataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_profiler_XPlane_EventMetadataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tensorflow_profiler_XPlane_StatMetadataEntry_descriptor =
      internal_static_tensorflow_profiler_XPlane_descriptor.getNestedTypes().get(1);
    internal_static_tensorflow_profiler_XPlane_StatMetadataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_profiler_XPlane_StatMetadataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tensorflow_profiler_XLine_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_tensorflow_profiler_XLine_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_profiler_XLine_descriptor,
        new java.lang.String[] { "Id", "DisplayId", "Name", "DisplayName", "TimestampNs", "DurationPs", "Events", });
    internal_static_tensorflow_profiler_XEvent_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_tensorflow_profiler_XEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_profiler_XEvent_descriptor,
        new java.lang.String[] { "MetadataId", "OffsetPs", "NumOccurrences", "DurationPs", "Stats", "Data", });
    internal_static_tensorflow_profiler_XStat_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_tensorflow_profiler_XStat_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_profiler_XStat_descriptor,
        new java.lang.String[] { "MetadataId", "DoubleValue", "Uint64Value", "Int64Value", "StrValue", "BytesValue", "RefValue", "Value", });
    internal_static_tensorflow_profiler_XEventMetadata_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_tensorflow_profiler_XEventMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_profiler_XEventMetadata_descriptor,
        new java.lang.String[] { "Id", "Name", "DisplayName", "Metadata", "Stats", "ChildId", });
    internal_static_tensorflow_profiler_XStatMetadata_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_tensorflow_profiler_XStatMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_profiler_XStatMetadata_descriptor,
        new java.lang.String[] { "Id", "Name", "Description", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
